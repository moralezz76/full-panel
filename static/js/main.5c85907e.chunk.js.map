{"version":3,"sources":["redux/global/selector.ts","components/commons/Loading/Loading.tsx","components/widgets/DottedTree/DottedTree.tsx","components/widgets/Icon/Icon.tsx","config/i18n.ts","redux/global/type.ts","config/AppConstants.ts","config/AppUrls.ts","services/ApiService.ts","services/AuthService.ts","redux/session/type.ts","redux/session/action.ts","redux/global/action.ts","services/GlobalService.ts","integrity/service.ts","integrity/actions.ts","redux/menu/type.ts","redux/menu/action.ts","components/commons/Button/Button.tsx","redux/session/selector.ts","redux/menu/selector.ts","redux/mock/action.ts","helpers/StorageHelper.ts","integrity/connect.ts","components/widgets/SubMenu/SubMenu.tsx","helpers/Utils.ts","components/commons/Panel/Panel.tsx","helpers/StatusHelper.ts","components/ModalContainer/Modal/Modal.tsx","components/ModalContainer/Modal/ConfirmModal/ConfirmationModal.tsx","components/ModalContainer/ModalContainer.tsx","components/ModalContainer/ModalContainerConnected.tsx","components/ToastContainer/Toast.tsx","components/ToastContainer/GlobalToastContainer.tsx","integrity/helpers.ts","components/formik/FormikForm/FormikForm.tsx","helpers/formatters/index.tsx","components/formik/fields/FieldContent.tsx","components/formik/fields/TextInput.tsx","helpers/DateHelpers.ts","components/formik/fields/DatePicker/DateRange.tsx","pages/Login/LoginPage.tsx","components/formik/fields/NumberInput.tsx","pages/Login/LoginPageConnected.tsx","config/Menu.ts","components/MainMenu/MainMenu.tsx","pages/Dashboard/Dashboard.tsx","pages/Templates/Welcome.tsx","pages/Home/HomePage.tsx","config/Routes.ts","pages/NotFound/NotFound.tsx","App.tsx","serviceWorker.tsx","redux/mock/type.ts","redux/global/reducer.ts","redux/session/reducer.ts","redux/menu/reducer.ts","redux/mock/reducer.ts","redux/root-reducer.ts","redux/store.tsx","index.tsx"],"names":["getGlobal","state","global","getModal","createSelector","modal","getToasts","toasts","isLoading","isLaunched","connect","fetchs","withOverlay","className","DottedTree","active","selected","classNames","Icon","name","size","detection","lookupLocalStorage","i18n","use","Backend","LanguageDetector","initReactI18next","init","load","fallbackLng","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","escapeValue","react","wait","bindStore","bindI18n","useSuspense","locale","services","languageDetector","detectors","localStorage","lookup","moment","EModalComponentType","EModalSize","EModalType","t","str","options","EApproveModalType","EToastType","modalIconByType","Default","Warning","Danger","Info","Success","endpoints","baseUrl","process","REACT_APP_API_BASE_URL","login","logout","action","Routes","apiServiceInstance","instance","all","requests","a","Promise","queryString","params","Object","keys","map","key","Array","value","encodeURIComponent","join","this","axios","create","baseURL","withCredentials","interceptors","response","error","status","data","code","description","hasError","promise","resolve","reject","resolveResponse","request","url","qs","length","includes","get","post","put","delete","AuthService","loginData","API","loginResult","Error","logoutResult","SessionActions","GlobalActions","loginAction","callback","dispatch","type","LOADING","LOGIN_SUCCESS","payload","LOGIN_FAILURE","showError","GlobalService","fetch","reduce","ret","item","fnd","indexOf","replace","result","showModalAction","SHOW_MODAL","hideModalAction","HIDE_MODAL","showToastAction","message","SHOW_TOAST","removeToastAction","id","REMOVE_TOAST","showSuccess","fetchAddAction","FETCH_ADD","fetchAdd","path","query","Date","getTime","fetchCommit","json","getState","fectchData","setGlobalState","REQUEST_START","toLowerCase","REQUEST_SUCCESS","REQUEST_FAILED","setGlobalStateAction","GLOBAL_STATE","serviceIntegrity","send","info","method","endpoint","MenuActions","submitAction","msgError","serviceResult","EButtonType","selectMenuAction","MENU_SELECTED","setBlinkMenuAction","blink","MENU_BLINK","setTimeout","getSessionState","session","getIsAuthenticated","authenticated","getUser","console","log","user","getMenu","loading","menu","getMenuSelected","getBlinkMenu","storage","localStorageSupported","window","dataJson","JSON","stringify","setItem","itemStr","getItem","parse","err","removeItem","clear","mockPostAction","password","BD","users","LOGOUT","fndUser","filter","I","username","btoa","i","add","IntegrityConnect","component","items","allDispatch","submit","mockPost","showModal","selectMenu","setBlinkMenu","stateToProps","integrityState","isAuthenticated","allState","obj","dispatchToProps","bindActionCreators","submenu","handleClickSubmenu","submenuSelected","childrensWithDottedTree","useState","submenuHover","setSubmenuHover","onMouseMove","icon","text","clickEvent","menuSepar","onMouseLeave","toString","onClick","withDottedTree","checkCorrectSeparator","separatorToCheck","classExist","split","children","header","footer","iconRight","rotateIcon","isDropDown","menuExpanded","dropDownContainer","withScroll","showMenu","setShowMenu","inputEl","useRef","handleClickOutside","e","current","contains","target","useEffect","document","addEventListener","eventClick","ref","hide","Button","buttonType","default","block","restProps","ACTIVE","BLOCKED","DELETED","Modal","props","title","onClose","iconName","Medium","defaultClose","classes","dialogClasses","headerClass","handleClose","upperFirst","role","light","ConfirmationModal","confirmMessage","confirmAction","confirmBtnText","cancelBtnText","afterCloseAction","React","submitting","setSubmitting","onClickConfirm","transparent","disabled","primary","ModalContainer","isHiding","prevProps","prevModal","show","body","style","overflow","setState","hideModal","ModalComponent","ComponentType","Confirmation","componentByType","classNameGlobal","hiding","classNameModal","backDrop","icons","success","prefix","danger","warning","Toast","time","visible","timer","handleMouseLeave","autoDismiss","startTimer","onDismiss","handleMouseEnter","pauseTimer","setInterval","clearInterval","alone","toastClasses","onMouseEnter","aria-hidden","getIconBasedOnType","aria-label","defaultProps","Primary","removeToast","toast","nonProps","getChildrens","cloneFn","isArray","newProps","cloneElement","validationSchema","initialValues","fields","onSubmit","onSuccess","childrens","describe","Yup","tests","getTests","getValues","values","formProps","formikform","requiredFormatter","label","field","onChange","onBlur","form","touched","errors","required","handleOnBlur","handleOnChange","onFieldBlur","onFieldChange","email","handleInputChange","event","handleInputBlur","htmlFor","childProp","isObject","TextInput","showPass","setShowPass","showAndHide","iconClasses","onKeyPress","DateFormats","ranges","Today","startOf","Yesterday","subtract","endOf","DateRange","handleApply","picker","handleRangeChanged","startDate","endDate","handleCancel","handleEvent","haveClear","undefined","from","to","setFieldValue","fromName","toLabel","toName","format","opensTo","dropsTo","placeholder","maxDate","withRanges","maxSpan","timePicker","start","end","separator","weekLabel","daysOfWeek","weekdaysMin","monthNames","monthsShort","firstDay","localeData","firstDayOfWeek","cancelLabel","timePicker24Hour","timePickerSeconds","containerStyles","display","opens","drops","alwaysShowCalendars","onEvent","Component","days","LoginPage","compose","injectIntl","intl","autoComplete","addOn","decimalSeparator","toLocaleString","substring","getDecimalSeparator","groupSeparator","getThousandSeparator","input","onValueChange","v","floatValue","valueChange","thousandSeparator","history","loginValidation","shape","push","routerLogin","withRouter","showToast","MainMenu","mainmenu","MainForm","modalType","confirmPassword","oneOf","showCustomModal","Welcome","location","deniedMsg","routes","needAuth","HomePage","NotFound","data-content","withTranslation","force","madoryDatabase","language","existData","alert","breadcrumbs","route","exact","render","Boolean","hostname","match","initModal","initialState","handleActions","initialUser","sessionReducer","permissions","MenuReducer","appReducer","combineReducers","globalReducer","SessionReducer","mock","MockReducer","rootReducer","middleware","thunk","enhancer","composeEnhancers","applyMiddleware","store","createStore","root","getElementById","ReactDOM","I18nextProvider","fallback","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c85907e.chunk.js","sourcesContent":["import { RootState } from 'ReduxTypes';\nimport { GlobalState } from './reducer';\nimport { createSelector } from 'reselect';\n\nconst getGlobal: (s: RootState) => GlobalState = state => state.global;\n\nexport const getModal = createSelector(getGlobal, (state: GlobalState) => state.modal);\nexport const getToasts = createSelector(getGlobal, (state: GlobalState) => state.toasts);\nexport const isLoading = createSelector(getGlobal, (state: GlobalState) => state.isLoading);\nexport const isLaunched = createSelector(getGlobal, (state: GlobalState) => state.isLaunched);\nexport const getFetchs = createSelector(getGlobal, (state: GlobalState) => state.fetchs);\n","import React from 'react';\nimport { RootState } from 'ReduxTypes';\nimport { isLoading } from '../../../redux/global/selector';\nimport { connect } from 'react-redux';\n\nimport './Loading.scss';\n\ninterface ILoadingProps {\n  withOverlay?: boolean;\n  isLoading: boolean;\n}\nconst Loading = ({ withOverlay = true, isLoading }: ILoadingProps) => {\n  return isLoading ? (\n    <div className=\"loading-wrapper\">\n      <div className=\"loading-wrapper_spinner\" />\n      {withOverlay && <div className=\"loading-wrapper_overlay\" />}\n    </div>\n  ) : null;\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    isLoading: isLoading(state),\n  };\n};\n\nexport default connect(mapStateToProps)(Loading);\n","import React from 'react';\r\nimport './DottedTree.scss';\r\nimport {FiDisc} from 'react-icons/fi';\r\nimport classNames from 'classnames';\r\n\r\ninterface IDottedTreeProps {\r\n  active?: boolean;\r\n  selected?: boolean;\r\n}\r\nconst DottedTree = ({\r\n  active,\r\n  selected,\r\n}: IDottedTreeProps) => (\r\n  <div className={classNames('dotted-body',{active, selected})}>\r\n    <div className=\"dotted-up\" />    \r\n    <div className=\"dotted-down\" />\r\n    <span className=\"tree-pointer\"><FiDisc /></span>\r\n  </div>\r\n\r\n);\r\n\r\nexport default DottedTree;\r\n","import React from 'react';\r\nimport { FiChevronRight } from 'react-icons/fi';\r\nimport { AiOutlineUserAdd, AiOutlineLock, AiOutlineUnlock, AiOutlineLogout, AiOutlineSetting, AiOutlineHome, AiOutlineDashboard, AiOutlineDesktop, AiOutlineAppstore, AiOutlineBank, } from 'react-icons/ai';\r\nimport './Icon.scss';\r\n\r\n\r\n\r\ninterface IIconProps {\r\n  name: string;\r\n  size?: string;\r\n}\r\nconst Icon = ({\r\n  name,\r\n  size = '18px'\r\n}: IIconProps) => {\r\n  switch (name) {\r\n    case 'home': return <AiOutlineHome size={size} />\r\n    case 'desktop': return <AiOutlineDesktop size={size} />\r\n    case 'dashboard': return <AiOutlineDashboard size={size} />\r\n    case 'appstore': return <AiOutlineAppstore size={size} />\r\n    case 'bank': return <AiOutlineBank size={size} />\r\n    case 'arrow-right': return <AiOutlineBank size={size} />\r\n    case 'setting': return <AiOutlineSetting size={size} />\r\n    case 'logout': return <AiOutlineLogout size={size} />\r\n    case 'unlock': return <AiOutlineUnlock size={size} />\r\n    case 'lock': return <AiOutlineLock size={size} />\r\n    case 'user-add': return <AiOutlineUserAdd size={size} />\r\n\r\n\r\n    default: return <FiChevronRight size={size} />\r\n  }\r\n};\r\n\r\nexport default Icon;\r\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { camelCase } from 'lodash';\nimport moment from 'moment';\n\nimport 'moment/locale/pt-br';\nimport 'moment/locale/es';\n\nconst detection = {\n  lookupLocalStorage: 'language',\n};\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    load: 'languageOnly',\n    fallbackLng: 'en',\n    debug: false,\n    ns: ['translation'],\n    defaultNS: 'translation',\n    nsSeparator: false,\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false,\n    },\n    detection,\n    react: {\n      wait: true,\n      bindStore: false,\n      bindI18n: 'languageChanged',\n      useSuspense: false,\n    },\n  });\n\nexport const locale =\n  i18n.services.languageDetector.detectors.localStorage.lookup(detection) || 'en';\nmoment.locale(locale);\n\nconst pascalCase = (str: string) => str[0].toUpperCase() + camelCase(str.substr(1));\n\nexport const translateWithPrefix = (term: string, prefix: string = 'label') => {\n  return i18n.t(`${prefix}${pascalCase(term)}`);\n};\n\nexport const t = (str: string, options?: {}) => i18n.t(str, options);\n\nexport default i18n;\n","import { ActionType } from 'typesafe-actions';\nimport * as globalActions from './action';\nimport * as React from 'react';\nimport { RootAction } from 'ReduxTypes';\nimport { IGenericObject } from '../../types/global';\n\nexport type GlobalActions = ActionType<typeof globalActions>;\n\nexport enum EModalComponentType {\n  Modal = 'modal',\n  Confirmation = 'confirmation',\n}\n\nexport enum EModalSize {\n  Small = 'small',\n  Medium = 'medium',\n  Large = 'large',\n}\n\nexport enum EModalType {\n  Default = 'default',\n  Warning = 'warning',\n  Danger = 'danger',\n  Info = 'info',\n  Success = 'success',\n}\n\nexport const modalIconByType: IGenericObject = {\n  Default: 'info-circle',\n  Warning: 'exclamation-triangle',\n  Danger: 'skull-crossbones',\n  Info: 'bell',\n  Success: 'check',\n};\n\nexport enum EApproveModalType {\n  NotFound = 'NotFound',\n  ReleaseCandidate = 'ReleaseCandidate',\n  NoDeposit = 'NoDeposit',\n  ForReview = 'ForReview',\n}\n\ninterface IModalCommonProps extends React.PropsWithChildren<{}> {\n  onClose?: () => void;\n  callback?: () => void;\n  backDrop?: boolean;\n  className?: string;\n}\n\nexport interface IModalProps extends IModalCommonProps {\n  title: string;\n  size?: EModalSize;\n  type?: EModalType;\n  iconName?: any;\n  centered?: boolean;\n  defaultClose?: boolean;\n  footer?: React.ReactNode;\n}\n\nexport interface IModalWithConfirm extends IModalProps {\n  confirmAction: RootAction;\n  showConfirm?: boolean;\n  confirmApproveText?: string;\n  confirmApproveButtonText?: string;\n  confirmCancelButtonText?: string;\n}\n\ninterface IBaseState {\n  show?: boolean;\n}\n\nexport interface IModalConfirmationProps extends IModalProps {\n  confirmMessage: string;\n  confirmAction: RootAction;\n  confirmBtnText?: string;\n  cancelBtnText?: string;\n  afterCloseAction?: (data: IGenericObject) => void;\n}\n\nexport interface IModal extends IBaseState {\n  type: EModalComponentType.Modal;\n  options: IModalProps;\n}\n\nexport interface IConfirmationModal extends IBaseState {\n  type: EModalComponentType.Confirmation;\n  options: IModalConfirmationProps;\n}\n\nexport type TModalState = IModal | IConfirmationModal;\n\nexport enum EToastType {\n  Success = 'success',\n  Warning = 'warning',\n  Danger = 'danger',\n  Primary = 'primary',\n}\n\nexport interface IToast {\n  id: number;\n  type: EToastType;\n  message: string;\n  time?: number;\n}\n\nexport interface IGenericFetchData {\n  path: string;\n  query: {};\n}\n\nexport interface IGenericFetch {\n  [key: string]: IGenericFetchData;\n}\n","import { ISelectValues, IGenericObject } from '../types/global';\r\n\r\nexport const scrollThreshold = 60;\r\nexport const maxRowData = 2000;\r\nexport const minColumnsDataTable = 3;\r\nexport const minimumFractionDigits = 2;\r\nexport const logoutStatus = [401];\r\nexport const candidatesDaysSpan = 5;\r\nexport const tagAllowedKeys = [32, 188, 186];\r\nexport const defaultMaxTagsAllowed = 15;\r\nexport const maxDataTableSelected = 30;\r\n\r\nexport const candidatesReasons: IGenericObject = {\r\n  UNMATCHED: 'UNMATCHED',\r\n  INCORRECT_PAID_VALUE: 'INCORRECT_PAID_VALUE',\r\n  INCORRECT_ACCOUNT: 'INCORRECT_ACCOUNT',\r\n  ACCOUNT_NAME_UNMATCHED: 'ACCOUNT_NAME_UNMATCHED',\r\n  PAID_CASH: 'PAID_CASH',\r\n  INCORRECT_APPROVEMENT: 'INCORRECT_APPROVEMENT',\r\n  NOT_FOUND: 'NOT_FOUND',\r\n  SAVING_ACCOUNT: 'SAVING_ACCOUNT',\r\n  OTHER: 'OTHER',\r\n  DEPOSIT_INSTEAD_TEF: 'DEPOSIT_INSTEAD_TEF',\r\n  APPROVE_FOR_REVIEW: 'APPROVE_FOR_REVIEW',\r\n};\r\n\r\nconst approveCandidateReason: ISelectValues[] = [\r\n  { value: candidatesReasons.UNMATCHED, label: 'optionsUnmatched' },\r\n  { value: candidatesReasons.INCORRECT_PAID_VALUE, label: 'optionsIncorrectPaidValue' },\r\n  { value: candidatesReasons.INCORRECT_ACCOUNT, label: 'optionsIncorrectAccount' },\r\n  { value: candidatesReasons.ACCOUNT_NAME_UNMATCHED, label: 'optionsAccountNameUnmatched' },\r\n  { value: candidatesReasons.PAID_CASH, label: 'optionsPaidCash' },\r\n];\r\nconst approveNotFoundReason: ISelectValues[] = [\r\n  { value: candidatesReasons.INCORRECT_APPROVEMENT, label: 'optionsIncorrectApprovement' },\r\n  { value: candidatesReasons.NOT_FOUND, label: 'optionsNotFound' },\r\n  { value: candidatesReasons.SAVING_ACCOUNT, label: 'optionsSavingAccount' },\r\n];\r\nconst approveNoDepositReason: ISelectValues[] = [\r\n  { value: candidatesReasons.OTHER, label: 'optionsOther' },\r\n  // { value: candidatesReasons.DEPOSIT_INSTEAD_TEF, label: 'optionsDepositTef' },\r\n];\r\nconst approveForReviewReason: ISelectValues[] = [\r\n  { value: candidatesReasons.APPROVE_FOR_REVIEW, label: 'optionsApproveForReview' },\r\n];\r\nexport const reasons: IGenericObject = {\r\n  NoDeposit: approveNoDepositReason,\r\n  ReleaseCandidate: approveCandidateReason,\r\n  NotFound: approveNotFoundReason,\r\n  ForReview: approveForReviewReason,\r\n};\r\n\r\nexport const userRoles = {\r\n  ADMIN: 'ADMIN',\r\n  PAYIN_MANAGER: 'PAYIN_MANAGER',\r\n  PAYIN: 'PAYIN',\r\n  PAYOUT_MANAGER: 'PAYOUT_MANAGER',\r\n  PAYOUT: 'PAYOUT',\r\n  FRAUD: 'FRAUD',\r\n  AUDIT: 'AUDIT',\r\n  OPERATIONS: 'OPERATIONS',\r\n  READ: 'READ',\r\n};\r\n\r\nexport const TransactionTypeStatus = {\r\n  CASH_IN: 'CASH_IN',\r\n  CASH_OUT: 'CASH_OUT',\r\n};\r\n\r\nexport const validationTypes = {\r\n  EXTENSION: 'EXTENSION',\r\n  CONTENT: 'CONTENT',\r\n};\r\n\r\nexport const validationTypesOptions: ISelectValues[] = [\r\n  { value: validationTypes.EXTENSION, label: 'optionsExtension' },\r\n  { value: validationTypes.CONTENT, label: 'optionsContent' },\r\n];\r\n","import { IGenericObject } from '../types/global';\n\nconst resources = {\n  logos: 'https://resources.customer-panel.com/misc/logo/',\n  flags: 'https://resources.customer-panel.com/country/flag/',\n  paymentMethods: 'https://resources.customer-panel.com/cashin/payment_method/square/',\n};\n\nconst endpoints: any = {\n  baseUrl: process.env.REACT_APP_API_BASE_URL,\n  // Authentication\n  login: '/auth/login',\n  logout: '/auth/destroy',\n  // Filters\n  action: 'ajax/{action}.json',\n};\n\nconst Routes = {\n  ROOT: '/',\n  LOGIN: '/login',\n  LOGOUT: '/logout',\n  HOME: '/home',\n};\n\nexport const buildPathWithParams = (path: string, params: any) => {\n  let finalPath = path;\n  Object.keys(params).forEach(key => {\n    finalPath = finalPath.replace(`:${key}`, params[key]);\n  });\n  return finalPath;\n};\n\nconst getCountryImage = (countryCode: string) =>\n  countryCode\n    ? `${resources.flags}${countryCode.toUpperCase()}.svg`\n    : `${process.env.PUBLIC_URL}/img/default-image.svg`;\n\nconst getPaymentMethodImage = (paymentMethodCode: string) =>\n  paymentMethodCode\n    ? `${resources.paymentMethods}${paymentMethodCode.toUpperCase()}.svg`\n    : `${process.env.PUBLIC_URL}/img/default-image.svg`;\n\nconst handleErrorImage = (e: any) => {\n  e.target.src = `${process.env.PUBLIC_URL}/img/default-image.svg`;\n};\n\nconst urlHelpers = {\n  getCountryImage,\n  getPaymentMethodImage,\n  handleErrorImage,\n};\n\nexport const exportType: IGenericObject = {\n  deposit: 'deposit',\n  cashouts: 'cashouts',\n  candidates: 'deposits/releaseCandidates',\n};\n\nexport { resources, endpoints, urlHelpers, Routes };\n","import axios, { AxiosError, AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { endpoints } from '../config/AppUrls';\n\nexport interface ApiResponse<T = any> {\n  data: T;\n  hasError?: boolean;\n  error?: any;\n}\n\nexport interface ApiError {\n  code: number;\n  description: string;\n  status: number;\n  hasError: boolean;\n  detail?: any;\n}\n\nexport class ApiService {\n  instance: any | AxiosInstance = null;\n\n  constructor() {\n    if (this.instance === null) {\n      this.instance = axios.create({\n        baseURL: endpoints.baseUrl,\n        withCredentials: true,\n      });\n    }\n    this.instance.interceptors.response.use(\n      (response: any) => response,\n      (error: AxiosError): ApiResponse<ApiError> => {\n        const {\n          response = { status: 500, data: { code: 0, description: '', status: 500 } },\n        } = error;\n        const { status, data } = response;\n        return { data: { ...data, status, hasError: true } };\n      }\n    );\n  }\n\n  static get logoutStatus(): number[] {\n    return [401];\n  }\n\n  resolveResponse<T = any>(promise: AxiosPromise<T | ApiError>) {\n    return new Promise<T>(async (resolve, reject) => {\n      const response = await promise;\n      const { data } = response as any;\n      if (data.hasError) {\n        reject(data);\n      }\n      resolve(data as T);\n    });\n  }\n\n  request<T = any>(options: AxiosRequestConfig): Promise<T> {\n    return this.resolveResponse(this.instance.request(options));\n  }\n\n  get<T = any>(url: string, params: any = {}): Promise<T> {\n    let join: string = '';\n    let qs: string = '';\n    if (Object.keys(params).length) {\n      qs = this.queryString(params);\n      join = url.includes('?') ? '&' : '?';\n    }\n\n    return this.resolveResponse(this.instance.get(url + join + qs));\n  }\n\n  all = async (requests: any[]): Promise<any[]> => {\n    return await Promise.all(requests);\n  };\n\n  post<T = any>(url: string, params: any = {}): Promise<T> {\n    return this.resolveResponse(this.instance.post(url, params));\n  }\n\n  put<T = any>(url: string, params: any = {}): Promise<T> {\n    return this.resolveResponse(this.instance.put(url, params));\n  }\n\n  delete<T = any>(url: string, params: any = {}): Promise<T> {\n    return this.resolveResponse(this.instance.delete(url, { data: params }));\n  }\n\n  queryString = (params: any): string =>\n    Object.keys(params)\n      .map(key => {\n        if (params[key] instanceof Array) {\n          return params[key]\n            .map((value: string) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            .join('&');\n        }\n        return `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`;\n      })\n      .join('&');\n}\n\nconst apiServiceInstance = new ApiService();\n\nexport default apiServiceInstance;\n","import API from './ApiService';\nimport { endpoints } from '../config/AppUrls';\nimport { User } from '../redux/session/type';\n\nexport interface LoginRequest {\n  username: string;\n  password: string;\n}\n\nexport class AuthService {\n  static login = async (loginData: LoginRequest) => {\n    const loginResult: User = await API.post(endpoints.login, loginData);\n    if (!loginResult) {\n      throw new Error('Invalid Credentials');\n    }\n    return loginResult;\n  };\n\n  static logout = async () => {\n    const logoutResult = await API.delete(endpoints.logout);\n    if (!logoutResult) {\n      throw new Error('Invalid Credentials');\n    }\n    return logoutResult;\n  };\n}\n\nexport default AuthService;\n","export enum SessionActions {\r\n  LOGIN = 'session/LOGIN',\r\n  LOGIN_SUCCESS = 'session/LOGIN_SUCCESS',\r\n  LOGIN_FAILURE = 'session/LOGIN_FAILURE',\r\n  LOGOUT = 'session/LOGOUT',\r\n  LOADING = 'session/LOADING',\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  password: string;\r\n  name: string;\r\n  language: string;\r\n  role: string;\r\n}\r\n","import { Dispatch } from 'redux';\nimport AuthService, { LoginRequest } from '../../services/AuthService';\nimport { showError } from '../global/action';\nimport { SessionActions } from './type';\n\nexport const loginAction = (loginData: LoginRequest, callback?: () => void) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({ type: SessionActions.LOADING });\n    const loginResult = await AuthService.login(loginData);\n    dispatch({ type: SessionActions.LOGIN_SUCCESS, payload: loginResult });\n    callback && callback();\n  } catch (e) {\n    dispatch({ type: SessionActions.LOGIN_FAILURE });\n    dispatch(showError('errorLogin'));\n  }\n};\n\nexport const logoutAction = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({ type: SessionActions.LOADING });\n    await AuthService.logout();\n    dispatch({ type: SessionActions.LOGOUT });\n    return true;\n  } catch (e) {\n    // If something bad happens while trying to do a BE logout, we just ignore and logout locally\n    dispatch({ type: SessionActions.LOGOUT });\n  }\n};\n","import { IGenericFetch } from './type';\nimport { TModalState, EToastType } from './type';\nimport { Dispatch } from 'redux';\nimport { ApiError } from '../../services/ApiService';\nimport { logoutStatus } from '../../config/AppConstants';\nimport { logoutAction } from '../session/action';\nimport { GlobalService } from '../../services/GlobalService';\n\nexport enum GlobalActions {\n  // global state\n  LOADING = 'global/LOADING',\n\n  // request\n  REQUEST_START = 'global/REQUEST_START',\n  REQUEST_SUCCESS = 'global/REQUEST_SUCCESS',\n  REQUEST_FAILED = 'global/REQUEST_FAILED',\n\n  // modal\n  SHOW_MODAL = 'modal/SHOW_MODAL',\n  HIDE_MODAL = 'modal/HIDE_MODAL',\n\n  // toast\n  SHOW_TOAST = 'toast/SHOW_TOAST',\n  REMOVE_TOAST = 'toast/REMOVE_TOAST',\n\n  // fetch\n\n  FETCH_ADD = 'fetch/FETCH_ADD',\n  //FETCH_ADD = 'fetch/FETCH_ADD',\n\n  // global state\n  GLOBAL_STATE = 'global/STATE',\n}\n\n/*export const requestStartAction = createAction(GlobalActions.REQUEST_START);\nexport const requestSuccessAction = createAction(GlobalActions.REQUEST_SUCCESS);\nexport const requestFailedAction = createAction(GlobalActions.REQUEST_FAILED);*/\n\nexport const showModalAction = (modal: TModalState) => {\n  return {\n    type: GlobalActions.SHOW_MODAL,\n    payload: { modal },\n  };\n};\n\nexport const hideModalAction = () => {\n  return {\n    type: GlobalActions.HIDE_MODAL,\n  };\n};\n\nexport const showToastAction = (type: EToastType, message: string) => {\n  return {\n    type: GlobalActions.SHOW_TOAST,\n    payload: { type, message },\n  };\n};\n\nexport const removeToastAction = (id: number) => {\n  return {\n    type: GlobalActions.REMOVE_TOAST,\n    payload: { id },\n  };\n};\n\nexport interface IServiceHelper {\n  service: () => any;\n  successText?: string;\n  actionName?: string;\n  withLoading?: boolean;\n  successCallback?: (response: any) => void;\n  errorCallback?: () => void;\n}\n\nexport const serviceHelperAction = (serviceHelper: IServiceHelper) => async (\n  dispatch: Dispatch<any>\n) => {\n  const {\n    withLoading,\n    service,\n    successText,\n    successCallback,\n    errorCallback,\n    actionName,\n  } = serviceHelper;\n  try {\n    withLoading &&\n      dispatch({\n        type: GlobalActions.REQUEST_START,\n      });\n    const payload = await service();\n    actionName &&\n      dispatch({\n        type: actionName,\n        payload,\n      });\n    withLoading &&\n      dispatch({\n        type: GlobalActions.REQUEST_SUCCESS,\n      });\n    successText && dispatch(showSuccess(successText));\n    successCallback && successCallback(payload);\n  } catch (error) {\n    dispatch(handleErrorAction(error));\n    errorCallback && errorCallback();\n  }\n};\n\nexport const showError = (message: string = 'errorNetworkGeneral') => {\n  return showToastAction(EToastType.Danger as EToastType, message);\n};\n\nexport const showSuccess = (message: string = 'successActionGeneral') => {\n  return showToastAction(EToastType.Success as EToastType, message);\n};\n\nexport const showWarning = (message: string = 'warningActionGeneral') => {\n  return showToastAction(EToastType.Warning as EToastType, message);\n};\n\nexport const handleErrorAction = (error: ApiError, showToast: boolean = true) => (\n  dispatch: Dispatch<any>\n) => {\n  dispatch({ type: GlobalActions.REQUEST_FAILED });\n  if (logoutStatus.includes(error.status)) {\n    dispatch(logoutAction());\n    dispatch(showError('errorSessionExpired'));\n  } else if (showToast) {\n    dispatch(showError(error.description || 'errorNetworkGeneral'));\n  }\n};\n\nexport const fetchAddAction = (payload: IGenericFetch) => {\n  return {\n    type: GlobalActions.FETCH_ADD,\n    payload,\n  };\n};\n\nexport const fetchAdd = (path: string, query = {}) => {\n  return fetchAddAction({\n    [new Date().getTime()]: {\n      path,\n      query,\n    },\n  });\n};\n\nexport const fetchCommit = (json: any) => async (dispatch: Dispatch<any>, getState: any) => {\n  const {\n    global: { fetchs },\n  } = getState();\n\n  await fectchData(dispatch, json, fetchs);\n  setGlobalState(dispatch, { fetchs: [] });\n};\n\nexport const _fectchData = async (dispatch: Dispatch, action: string, data: {}) => {\n  try {\n    dispatch({ type: GlobalActions.REQUEST_START });\n    const result = await GlobalService.fetch(data);\n    dispatch({ type: GlobalActions.REQUEST_SUCCESS });\n    dispatch({ type: `${action}_SUCCESS`, payload: result });\n  } catch (e) {\n    dispatch({ type: GlobalActions.REQUEST_FAILED });\n    dispatch({ type: `${action}_FAILURE` });\n    dispatch(showError(e.description || 'errorNetworkGeneral'));\n  }\n};\n\nexport const fectchData = async (dispatch: Dispatch, action: string, data: {}) => {\n  try {\n    dispatch({ type: GlobalActions.REQUEST_START });\n    const result = await GlobalService.fetch({ data, action: action.toLowerCase() });\n    dispatch({ type: GlobalActions.REQUEST_SUCCESS });\n    dispatch({ type: `${action}_SUCCESS`, payload: result });\n    setGlobalState(dispatch, result);\n  } catch (e) {\n    dispatch({ type: GlobalActions.REQUEST_FAILED });\n    dispatch({ type: `${action}_FAILURE` });\n    dispatch(showError(e.description || 'errorNetworkGeneral'));\n  }\n};\n\nexport const setGlobalStateAction = (payload: {}) => {\n  return {\n    type: GlobalActions.GLOBAL_STATE,\n    payload,\n  };\n};\n\nexport const setGlobalState = (dispatch: Dispatch, data = {}) => {\n  return dispatch(setGlobalStateAction(data));\n};\n","import API from './ApiService';\nimport { endpoints } from '../config/AppUrls';\n\nexport class GlobalService {\n  static fetch = async (data: any) => {\n    // console.log(data);\n\n    const url = Object.keys(data).reduce((ret: string, item: any) => {\n      const fnd = '{' + item + '}';\n      const idx = ret.indexOf(fnd);\n      //console.log(idx);\n      if (idx !== -1) {\n        ret = ret.replace(fnd, data[item]);\n      }\n      return ret;\n    }, endpoints.action);\n\n    //console.log(data.data);\n    const result: any = await API.get(url, data.data);\n    if (!result) {\n      throw new Error('Api response error');\n    }\n    return result;\n  };\n}\n","import API from '../services/ApiService';\r\nimport { endpoints } from '../config/AppUrls';\r\n\r\n\r\ninterface InfoProps  {\r\n  data: object; \r\n  action: string;\r\n  method: string;\r\n}\r\n\r\nexport class serviceIntegrity {\r\n  static send = async (info: InfoProps) => {\r\n    let response = {}\r\n    const { data , action, method } = info\r\n    const endpoint = endpoints[action];\r\n    \r\n    switch(method) {\r\n      case 'GET':\r\n        response = await API.get(endpoint, data);\r\n        break;\r\n      case 'DELETE':\r\n          response = await API.get(endpoint, data);\r\n          break;  \r\n      default:\r\n        response = await API.post(endpoint, data);\r\n    }\r\n\r\n    if (!response) {\r\n      throw new Error('Service error...');\r\n    }\r\n    return response;\r\n  };\r\n\r\n}\r\n","import { Dispatch } from 'redux';\nimport { showError } from '../redux/global/action';\nimport { serviceIntegrity } from './service';\n\ninterface SubmitActionProps {\n  data: object;\n  action: string;\n  method: string;\n  msgError: string;\n}\n\nexport const submitAction = (info: SubmitActionProps, callback?: () => void) => async (\n  dispatch: Dispatch\n) => {\n  const { action, msgError = '' } = info;\n\n  try {\n    dispatch({ type: action });\n    const serviceResult = await serviceIntegrity.send(info);\n    dispatch({ type: action + '_SUCCESS', payload: serviceResult });\n    callback && callback();\n  } catch (e) {\n    dispatch({ type: action + '_FAILURE' });\n    dispatch(showError(msgError));\n  }\n};\n","export enum MenuActions {\r\n  MENU_SELECTED = 'Menu/SELECTED',\r\n  MENU_BLINK = 'Menu/BLINK',\r\n}\r\n\r\n","import { Dispatch } from 'redux';\nimport { MenuActions } from './type';\n\nexport const selectMenuAction = (selected: string) => async (\n  dispatch: Dispatch\n) => {\n    dispatch({ type: MenuActions.MENU_SELECTED,  selected});\n};\n\nexport const setBlinkMenuAction = (blink: string) => async (\n  dispatch: Dispatch\n) => {\n    dispatch({ type: MenuActions.MENU_BLINK,  blink:''});\n    setTimeout(()=>{\n      dispatch({ type: MenuActions.MENU_BLINK,  blink});\n    },1)\n    \n};\n","import React from 'react';\r\nimport './Button.scss';\r\nimport classNames from 'classnames';\r\nimport { FaTimes } from 'react-icons/fa';\r\n\r\nexport enum EButtonType {\r\n  default = 'primary',\r\n  primary = 'primary',\r\n  secondary = 'secondary',\r\n  light = 'light',\r\n  transparent = 'transparent',\r\n  link = 'link',\r\n}\r\ninterface IButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n  children: React.ReactNode;\r\n  buttonType?: EButtonType;\r\n  className?: string;\r\n  block?: boolean;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n}\r\nconst Button = ({\r\n  onClick,\r\n  children,\r\n  buttonType = EButtonType.default,\r\n  className = '',\r\n  block,\r\n  type = 'button',\r\n  loading = false,\r\n  ...restProps\r\n}: IButtonProps) => (\r\n  <button\r\n    onClick={onClick}\r\n    type={type}\r\n    className={classNames('button', buttonType, className, { block: block })}\r\n    {...restProps}\r\n  >\r\n    {loading && (\r\n      <FaTimes />\r\n    )}\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import { createSelector } from 'reselect';\nimport { RootState } from 'ReduxTypes';\nimport { SessionState } from './reducer';\n\nconst getSessionState: (s: RootState) => SessionState = state => state.session;\n\nexport const getIsAuthenticated = createSelector(getSessionState, state => {\n  return state.authenticated;\n});\n\nexport const getUser: any = createSelector(getSessionState, state => {\n  console.log(state.user);\n  return state.user;\n});\n\nexport const isLoading = createSelector(getSessionState, state => {\n  return state.loading;\n});\n","import { RootState } from 'ReduxTypes';\nimport { MenuState } from './reducer';\nimport { createSelector } from 'reselect';\n\nconst getMenu: (s: RootState) => MenuState = state => state.menu;\n\nexport const getMenuSelected = createSelector(getMenu, (state: MenuState) => state.selected);\nexport const getBlinkMenu = createSelector(getMenu, (state: MenuState) => state.blink);\n","import { Dispatch } from 'redux';\r\n//import { showError } from '../global/action';\r\nimport { StorageHelper } from '../../helpers/StorageHelper';\r\nimport { GlobalActions, showError, showSuccess, hideModalAction } from './../global/action';\r\nimport { SessionActions } from './../session/type';\r\n\r\nconst storage = new StorageHelper();\r\n\r\nexport const mockPostAction = (data: any, callback?: () => void) => async (dispatch: Dispatch) => {\r\n  dispatch({ type: GlobalActions.REQUEST_START });\r\n\r\n  await new Promise(resolve => {\r\n    setTimeout(resolve, 300);\r\n  });\r\n\r\n  const { name, id, password } = data;\r\n\r\n  const BD = storage.get('madory-database');\r\n  const { users } = BD;\r\n  let user = {};\r\n\r\n  switch (data.action) {\r\n    case 'logout':\r\n      dispatch({ type: SessionActions.LOGOUT });\r\n      dispatch({ type: GlobalActions.REQUEST_SUCCESS });\r\n      break;\r\n    case 'login':\r\n      const fndUser = users.filter((I: any) => I.username === data.username);\r\n\r\n      if (fndUser.length) {\r\n        const user = fndUser[0];\r\n        if (user.password === btoa(data.password)) {\r\n          dispatch({ type: SessionActions.LOGIN_SUCCESS, payload: { user } });\r\n          dispatch({ type: GlobalActions.REQUEST_SUCCESS });\r\n          return true;\r\n        }\r\n      }\r\n\r\n      dispatch({ type: GlobalActions.REQUEST_FAILED });\r\n      dispatch(showError('errorLoginError'));\r\n      return false;\r\n\r\n    case 'change':\r\n      BD.users = BD.users.map((i: any) => {\r\n        if (i.id === id) {\r\n          i.password = btoa(password);\r\n          user = i;\r\n        }\r\n        return i;\r\n      });\r\n\r\n      storage.add('madory-database', BD);\r\n\r\n      dispatch({ type: GlobalActions.REQUEST_SUCCESS });\r\n      dispatch(showSuccess('succChangePass'));\r\n      dispatch(hideModalAction());\r\n      return false;\r\n\r\n    case 'modify':\r\n      BD.users = BD.users.map((i: any) => {\r\n        if (i.id === id) {\r\n          i.name = name;\r\n          user = i;\r\n        }\r\n        return i;\r\n      });\r\n\r\n      storage.add('madory-database', BD);\r\n      dispatch({ type: SessionActions.LOGIN_SUCCESS, payload: { user } });\r\n      dispatch({ type: GlobalActions.REQUEST_SUCCESS });\r\n      dispatch(showSuccess('succChangeName'));\r\n      dispatch(hideModalAction());\r\n      return false;\r\n\r\n    case 'reset':\r\n      BD.users = BD.users.map((i: any) => {\r\n        if (i.id === id) {\r\n          i.password = btoa('123');\r\n          user = i;\r\n        }\r\n        return i;\r\n      });\r\n\r\n      storage.add('madory-database', BD);\r\n\r\n      dispatch({ type: GlobalActions.REQUEST_SUCCESS });\r\n      dispatch(showSuccess('succResetPass'));\r\n      dispatch(hideModalAction());\r\n      return false;\r\n  }\r\n};\r\n\r\nexport const start = (force = false) => {\r\n  const madoryDatabase = {\r\n    users: [\r\n      {\r\n        id: '1',\r\n        username: 'admin@test.com',\r\n        name: 'Main Admin',\r\n        password: btoa('admin'),\r\n        language: 'en',\r\n        role: 'admin',\r\n      },\r\n      {\r\n        id: '2',\r\n        username: 'customer@test.com',\r\n        name: 'Eddie McLawrens',\r\n        password: btoa('customer'),\r\n        language: 'en',\r\n        role: 'customer',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const existData = storage.get('madory-database');\r\n\r\n  if (force || !existData) {\r\n    alert(1);\r\n    storage.add('madory-database', madoryDatabase);\r\n  }\r\n};\r\n","export interface IStorageItem {\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\nexport class StorageHelper {\r\n  localStorageSupported: boolean;\r\n\r\n  constructor() {\r\n    this.localStorageSupported =\r\n      typeof window['localStorage'] != 'undefined' &&\r\n      window['localStorage'] != null;\r\n  }\r\n\r\n  // add value to storage\r\n  add(key: string, item: any) {\r\n    if (this.localStorageSupported) {\r\n      const dataJson = JSON.stringify(item);\r\n      localStorage.setItem(key, dataJson);\r\n    }\r\n  }\r\n\r\n  // get one item by key from storage\r\n  get(key: string): any | null {\r\n    if (this.localStorageSupported) {\r\n      try {\r\n        const itemStr = localStorage.getItem(key);\r\n        return itemStr ? JSON.parse(itemStr) : null;\r\n      } catch (err) {\r\n        return localStorage.getItem(key);\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // remove value from storage\r\n  remove(key: string): void {\r\n    if (this.localStorageSupported) {\r\n      localStorage.removeItem(key);\r\n    }\r\n  }\r\n\r\n  // clear storage (remove all items from it)\r\n  clear() {\r\n    if (this.localStorageSupported) {\r\n      localStorage.clear();\r\n    }\r\n  }\r\n}\r\n","import { submitAction } from './actions';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from 'ReduxTypes';\nimport {\n  fetchAdd,\n  fetchCommit,\n  setGlobalStateAction,\n  showModalAction,\n} from '../redux/global/action';\n\nimport {\n  selectMenuAction,\n  setBlinkMenuAction,\n} from '../redux/menu/action';\n\nimport { isLaunched, isLoading } from '../redux/global/selector';\nimport { getIsAuthenticated, getUser } from '../redux/session/selector';\nimport { getMenuSelected, getBlinkMenu } from '../redux/menu/selector';\nimport { mockPostAction } from '../redux/mock/action';\n\n//export const IntegrityConnect = (component: ComponentType<never>, items: Array<String>): any => {\nconst IntegrityConnect = (component: any, items: Array<String>): any => {\n  const allState: any = (state: RootState) => {\n    return {\n      isLaunched: isLaunched(state),\n      isLoading: isLoading(state),\n      isAuthenticated: getIsAuthenticated(state),\n      getUser: getUser(state),\n      getMenuSelected: getMenuSelected(state),\n      getBlinkMenu: getBlinkMenu(state),\n    };\n  };\n\n  const allDispatch: any = {\n    submit: submitAction,\n    fetchAdd: fetchAdd,\n    fetchCommit: fetchCommit,\n    setGlobalState: setGlobalStateAction,\n    mockPost: mockPostAction,\n    showModal: showModalAction,\n    selectMenu: selectMenuAction, \n    setBlinkMenu : setBlinkMenuAction,\n  };\n\n  const reduceDispatch = (ret: object, item: any) => {\n    return {\n      ...ret,\n      ...(items.indexOf(item) !== -1 && { [item]: allDispatch[item] }),\n    };\n  };\n\n  const stateToProps = (state: RootState) => {\n    const integrityState = allState(state);\n    return Object.keys(integrityState).reduce((ret: object, item: any, obj: any) => {\n      return {\n        ...ret,\n        ...(items.indexOf(item) !== -1 && { [item]: integrityState[item] }),\n      };\n    }, {});\n  };\n\n  const dispatchToProps = Object.keys(allDispatch).reduce(reduceDispatch, {}); // OK\n\n  const mapStateToProps = (state: RootState) => stateToProps(state);\n\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(dispatchToProps, dispatch);\n\n  return connect(mapStateToProps, mapDispatchToProps)(component);\n};\n\nexport {\n  fetchAdd,\n  fetchCommit,\n  setGlobalStateAction,\n  isLaunched,\n  isLoading,\n  getIsAuthenticated,\n  getUser,\n  showModalAction,\n  IntegrityConnect,\n  selectMenuAction,\n  getMenuSelected,\n  setBlinkMenuAction,\n  getBlinkMenu,\n};\n","import React, { useState } from 'react';\r\nimport './SubMenu.scss';\r\nimport { t } from '../../../config/i18n';\r\nimport { FiDisc } from 'react-icons/fi';\r\nimport classNames from 'classnames';\r\nimport { IMenu } from '../../../config/Menu';\r\nimport { Panel } from '../../commons';\r\nimport { IntegrityConnect, getBlinkMenu } from '../../../integrity/connect';\r\n\r\ninterface ISubMenuProps {\r\n  submenu: IMenu[];\r\n  setSubmenuHover?: (I: number) => void;\r\n  handleClickSubmenu: (key: string, event: () => void) => void;\r\n  getBlinkMenu: typeof getBlinkMenu;\r\n  submenuSelected: number;\r\n  submenuHover: number;\r\n  childrensWithDottedTree?: boolean;\r\n  name?: string;\r\n}\r\n\r\nconst SubMenu = ({\r\n  submenu,\r\n  getBlinkMenu,\r\n  handleClickSubmenu,\r\n  submenuSelected,\r\n  childrensWithDottedTree = false,\r\n  name = '',\r\n}: ISubMenuProps) => {\r\n  const [submenuHover, setSubmenuHover] = useState(-1);\r\n\r\n  const onMouseMove = (I: number) => {\r\n    setSubmenuHover(I);\r\n  };\r\n\r\n  const onMouseLeave = (I: number) => {\r\n    setSubmenuHover(I);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {submenu.map(({ icon, text, clickEvent, menuSepar }: any, I: number) => {\r\n        const key = btoa(`${name}_${text}`);\r\n        return (\r\n          <li key={key} onMouseMove={() => onMouseMove(I)} onMouseLeave={() => onMouseMove(-1)}>\r\n            <Panel\r\n              icon={icon}\r\n              className={classNames('item-menu', {\r\n                'blink-panel': key === getBlinkMenu.toString(),\r\n                'submenu-selected': submenuSelected === I,\r\n                'path-selected': I < submenuHover || I < submenuSelected,\r\n                'menu-separ': menuSepar,\r\n              })}\r\n              onClick={() => handleClickSubmenu(key, clickEvent)}\r\n              withDottedTree={childrensWithDottedTree}\r\n            >\r\n              {t(text)}\r\n            </Panel>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default IntegrityConnect(SubMenu, ['getBlinkMenu']);\r\n","export const jsonFormatter = (json: string) => {\r\n  return JSON.stringify(JSON.parse(json), null, 2);\r\n};\r\n\r\nexport const isValidJson = (json: string) => {\r\n  try {\r\n    JSON.parse(json);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getDecimalSeparator = (locale: any) => {\r\n  const numberWithDecimalSeparator = 1.1;\r\n\r\n  const separator = numberWithDecimalSeparator.toLocaleString(locale).substring(1, 2);\r\n  return checkCorrectSeparator(separator) ? separator : '.';\r\n};\r\n\r\nexport const fileNameFormatter = (fileName: string) => {\r\n  const splitName = fileName.split('.');\r\n  const name = splitName[0];\r\n  const ext = splitName.length > 1 ? `.${splitName[1]}` : '';\r\n  const formattedName =\r\n    name.length > 24\r\n      ? `${name.substring(0, 19)}...${name.substring(name.length - 2, name.length)}${ext}`\r\n      : `${name}${ext}`;\r\n  return formattedName;\r\n};\r\n\r\nexport const getThousandSeparator = (locale: any) => {\r\n  const numberWithThousandSeparator = 10000;\r\n\r\n  const separator = numberWithThousandSeparator.toLocaleString(locale).substring(2, 3);\r\n  return checkCorrectSeparator(separator) ? separator : ',';\r\n};\r\n\r\nconst checkCorrectSeparator = (separatorToCheck: any) => {\r\n  return separatorToCheck.length === 1 && (separatorToCheck === '.' || separatorToCheck === ',');\r\n};\r\n\r\nexport const classExist = (classNames: string, className: string) => {\r\n  const allClasses = classNames.split(' ');\r\n  return allClasses.indexOf(className) !== -1;\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { DottedTree, Icon } from '../../widgets/';\r\nimport './Panel.scss';\r\nimport { IMenu } from '../../../config/Menu';\r\nimport {\r\n  IntegrityConnect,\r\n  getMenuSelected,\r\n  selectMenuAction,\r\n  setBlinkMenuAction,\r\n} from '../../../integrity/connect';\r\nimport { SubMenu } from '../../widgets';\r\nimport { bool } from 'yup';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { classExist } from '../../../helpers/Utils';\r\n\r\ninterface IPanelProps {\r\n  getMenuSelected: typeof getMenuSelected;\r\n  selectMenu: typeof selectMenuAction;\r\n  setBlinkMenu: typeof setBlinkMenuAction;\r\n  children?: any;\r\n  className?: string;\r\n  header?: any;\r\n  footer?: any;\r\n  icon?: string;\r\n  iconRight?: any;\r\n  submenu?: IMenu[];\r\n  rotateIcon?: any;\r\n  isDropDown?: boolean;\r\n  onClick?: () => void;\r\n  withDottedTree?: boolean;\r\n  childrensWithDottedTree?: boolean;\r\n  name?: string;\r\n  menuExpanded?: boolean;\r\n  dropDownContainer?: any;\r\n  withScroll?: boolean;\r\n}\r\nconst Panel = ({\r\n  children,\r\n  className = '',\r\n  header,\r\n  footer,\r\n  icon,\r\n  iconRight,\r\n  submenu,\r\n  rotateIcon,\r\n  isDropDown = false,\r\n  onClick,\r\n  withDottedTree = false,\r\n  childrensWithDottedTree = false,\r\n  name = '',\r\n  getMenuSelected,\r\n  selectMenu,\r\n  setBlinkMenu,\r\n  menuExpanded = false,\r\n  dropDownContainer = null,\r\n  withScroll = false,\r\n}: IPanelProps) => {\r\n  const [submenuHover, setSubmenuHover] = useState(-1);\r\n  const [showMenu, setShowMenu] = useState(menuExpanded);\r\n\r\n  const key = btoa(name || header);\r\n  const inputEl: any = useRef(null);\r\n\r\n  const submenuSelected = submenu\r\n    ? submenu.reduce((ret: any, { text }: any, I: number) => {\r\n        const key = btoa(`${name}_${text}`);\r\n        if (key === getMenuSelected.toString()) return I;\r\n        return ret;\r\n      }, null)\r\n    : null;\r\n\r\n  const handleClick = () => {\r\n    if (submenu) {\r\n      if (showMenu && submenuSelected !== null) {\r\n        setBlinkMenu(getMenuSelected.toString());\r\n        return;\r\n      }\r\n      setShowMenu(!showMenu);\r\n    } else if (!isDropDown) {\r\n      if (classExist(className, 'main-menu')) {\r\n        handleClickSubmenu(key, onClick);\r\n      }\r\n    }\r\n    onClick && onClick();\r\n  };\r\n\r\n  const handleClickOutside = (e: any) => {\r\n    isDropDown &&\r\n      setTimeout(() => {\r\n        if (inputEl.current && !inputEl.current.contains(e.target)) {\r\n          setShowMenu(false);\r\n        }\r\n      }, 200);\r\n  };\r\n\r\n  useEffect(() => {\r\n    isDropDown && document.addEventListener('mousedown', handleClickOutside);\r\n  });\r\n\r\n  const handleClickSubmenu = (key: string, eventClick?: () => void) => {\r\n    console.log(isDropDown);\r\n    if (classExist(className, 'item-menu') && !isDropDown) selectMenu(key);\r\n    eventClick && eventClick();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        ref={inputEl}\r\n        className={classNames('panel', className, {\r\n          'submenu-selected': getMenuSelected.toString() === key,\r\n          'menu-open': showMenu,\r\n          'menu-selected': submenuSelected !== null,\r\n          'menu-over': submenuHover !== -1,\r\n        })}\r\n        onClick={handleClick}\r\n      >\r\n        {withDottedTree && <DottedTree />}\r\n        {icon && (\r\n          <div>\r\n            <div\r\n              className={classNames(\r\n                {\r\n                  'is-rotate': showMenu && rotateIcon === 'iconLeft',\r\n                },\r\n                'icon-menu icon-left'\r\n              )}\r\n            >\r\n              <Icon name={icon} />\r\n            </div>\r\n          </div>\r\n        )}\r\n        {typeof header === 'string' ? <div className=\"panel-header\">{header}</div> : header}\r\n        {children}\r\n        {footer && <div className=\"panel-footer\">{footer}</div>}\r\n        {iconRight && (\r\n          <div\r\n            className={classNames(\r\n              {\r\n                'is-rotate': showMenu && rotateIcon === 'iconRight',\r\n              },\r\n              'icon-menu icon-right'\r\n            )}\r\n          >\r\n            <Icon name={iconRight} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      {(submenu || dropDownContainer) && (\r\n        <div className={classNames('panel-submenu', { hide: !showMenu, 'drop-down': isDropDown })}>\r\n          {dropDownContainer}\r\n          {submenu && (\r\n            <SubMenu\r\n              submenuSelected={submenuSelected}\r\n              submenu={submenu}\r\n              handleClickSubmenu={handleClickSubmenu}\r\n              childrensWithDottedTree={childrensWithDottedTree}\r\n              name={name}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IntegrityConnect(Panel, ['getMenuSelected', 'selectMenu', 'setBlinkMenu']);\r\n","import { IGenericObject } from '../types/global';\r\n\r\nexport const UserStatus: IGenericObject = {\r\n  ACTIVE: 'ACTIVE',\r\n  BLOCKED: 'BLOCKED',\r\n  DELETED: 'DELETED',\r\n};\r\n\r\nconst Status = {\r\n  ...UserStatus,\r\n};\r\n\r\nexport const statusClasses = (originalStatus: string) => {\r\n  if (!originalStatus) {\r\n    return null;\r\n  }\r\n  const status = originalStatus.toUpperCase();\r\n  return {\r\n    'bg-success': [Status.ACTIVE].includes(status),\r\n    'bg-secondary': [Status.BLOCKED].includes(status),\r\n    'bg-warning': [Status.DELETED].includes(status),\r\n  };\r\n};\r\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './Modal.scss';\nimport { IModalProps, EModalSize, EModalType, modalIconByType } from '../../../redux/global/type';\nimport { Button, EButtonType } from '../../../components/commons';\nimport { t } from '../../../config/i18n';\nimport { FaTimes } from 'react-icons/fa';\nimport { upperFirst } from 'lodash';\n\nconst Modal: React.FC<IModalProps> = props => {\n  const {\n    title,\n    children,\n    onClose = () => {},\n    iconName = modalIconByType.Default,\n    size = EModalSize.Medium,\n    type = EModalType.Default,\n    defaultClose = false,\n    className,\n    footer,\n    callback,\n  } = props;\n  const classes = classNames('custom-modal fade', className);\n  const dialogClasses = classNames('custom-modal__dialog', `${size}`);\n  const headerClass = classNames(`header__${type}`);\n  const iconNameType: string = modalIconByType[upperFirst(type)];\n  const icon = iconNameType || iconName;\n  const handleClose = () => {\n    onClose && onClose();\n    callback && callback();\n  };\n  return (\n    <div className={classes} role=\"dialog\">\n      <div className={dialogClasses}>\n        <header className={headerClass}>\n          <div className=\"header__icon\">\n            <FaTimes />\n          </div>\n          <h3 className=\"title\">{title}</h3>\n          <Button className=\"header__close\" buttonType={EButtonType.light} onClick={handleClose}>\n            <FaTimes />\n          </Button>\n        </header>\n        <div className=\"body\">{children}</div>\n        {defaultClose && !footer && (\n          <footer>\n            <Button\n              className=\"default-close\"\n              buttonType={EButtonType.default}\n              onClick={handleClose}\n            >\n              {t('buttonClose')}\n            </Button>\n          </footer>\n        )}\n        {footer && <footer>{footer}</footer>}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import * as React from 'react';\r\nimport './ConfirmationModal.scss';\r\nimport { IModalConfirmationProps, EModalType } from '../../../../redux/global/type';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport { Button, EButtonType } from '../../../commons';\r\nimport { t } from '../../../../config/i18n';\r\nimport Modal from '../Modal';\r\n\r\nconst ConfirmationModal: React.FC<IModalConfirmationProps> = props => {\r\n  const {\r\n    title,\r\n    confirmMessage,\r\n    className,\r\n    onClose,\r\n    confirmAction,\r\n    confirmBtnText = t('buttonConfirm'),\r\n    cancelBtnText = t('buttonCancel'),\r\n    afterCloseAction,\r\n  } = props;\r\n  const [submitting, setSubmitting] = React.useState(false);\r\n  const onClickConfirm = async () => {\r\n    setSubmitting(true);\r\n    const response = await confirmAction();\r\n    onClose && onClose();\r\n    setSubmitting(false);\r\n    // Necessary 'cause the hidding effect of modals, if any problem remove both timeouts\r\n    if (afterCloseAction) {\r\n      setTimeout(() => afterCloseAction(response), 345);\r\n    }\r\n  };\r\n  return (\r\n    <Modal className={className} title={title} type={EModalType.Warning} onClose={onClose}>\r\n      <div className=\"confirm__modal\">\r\n        <div className=\"confirm__modal__body\">\r\n          <div className=\"confirm__modal__body__icon\">\r\n            <FaTimes />\r\n          </div>\r\n          <p>{confirmMessage}</p>\r\n        </div>\r\n        <footer>\r\n          <div className=\"buttons-container\">\r\n            <Button\r\n              buttonType={EButtonType.transparent}\r\n              type=\"submit\"\r\n              onClick={onClickConfirm}\r\n              disabled={submitting}\r\n              loading={submitting}\r\n            >\r\n              {confirmBtnText}\r\n            </Button>\r\n            <Button buttonType={EButtonType.primary} onClick={onClose}>\r\n              {cancelBtnText}\r\n            </Button>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import * as React from 'react';\nimport './ModalContainer.scss';\nimport { EModalComponentType, TModalState } from '../../redux/global/type';\nimport classNames from 'classnames';\nimport ConfirmationModal from './Modal/ConfirmModal/ConfirmationModal';\nimport Modal from './Modal/Modal';\n\ninterface ModalContainerProps {\n  modal: TModalState;\n  hideModal: () => void;\n}\n\ninterface ModalContainerState {\n  modal: TModalState;\n  isHiding?: boolean;\n}\n\nclass ModalContainer extends React.Component<ModalContainerProps, ModalContainerState> {\n  state = {\n    modal: this.props.modal,\n    isHiding: false,\n  };\n\n  componentDidUpdate(prevProps: ModalContainerProps) {\n    const { modal: prevModal } = prevProps;\n    const { modal } = this.props;\n\n    if (!modal.show && prevModal.show) {\n      document.body.style.overflow = 'auto';\n      this.setState({ isHiding: true });\n      setTimeout(() => this.setState({ modal, isHiding: false }), 340);\n    } else if (modal.show !== prevModal.show) {\n      document.body.style.overflow = 'hidden';\n      this.setState({ modal });\n    }\n  }\n\n  render() {\n    const { hideModal } = this.props;\n    const { modal, isHiding } = this.state;\n    const {\n      type,\n      show,\n      options: { className = '', ...options },\n    } = modal;\n    const closeModal = () => {\n      const { backDrop = false } = options;\n      if (backDrop) {\n        hideModal();\n      }\n    };\n\n    const componentByType: (t: EModalComponentType) => React.ReactNode = ComponentType => {\n      switch (ComponentType) {\n        case EModalComponentType.Confirmation:\n          return ConfirmationModal;\n\n        case EModalComponentType.Modal:\n        default:\n          return Modal;\n      }\n    };\n\n    if (!show) {\n      return null;\n    }\n    const ModalComponent: any = componentByType(type);\n    const classNameGlobal = classNames('global-modal', { hiding: isHiding });\n    const classNameModal = classNames(className, {\n      hiding: isHiding,\n      'show normal': show && !isHiding,\n    });\n    return (\n      <div className={classNameGlobal}>\n        <div className=\"global-modal__overlay\" onClick={closeModal} />\n        <div className=\"global-modal__content\">\n          <ModalComponent onClose={hideModal} {...options} className={classNameModal} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ModalContainer;\n","import { getModal } from '../../redux/global/selector';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { hideModalAction } from '../../redux/global/action';\r\nimport { connect } from 'react-redux';\r\nimport ModalContainer from './ModalContainer';\r\nimport { RootState } from 'ReduxTypes';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  modal: getModal(state),\r\n});\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      hideModal: hideModalAction,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalContainer);\r\n","import * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport './Toast.scss';\r\nimport { t } from '../../config/i18n';\r\nimport { EToastType } from '../../redux/global/type';\r\n\r\ninterface IToastProps {\r\n  message: string;\r\n  type: EToastType;\r\n  time: number;\r\n  autoDismiss: boolean;\r\n  alone: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface IToastState {\r\n  time: number;\r\n  visible: boolean;\r\n}\r\n\r\nconst icons: any = {\r\n  success: { prefix: 'far', iconName: 'check-circle' },\r\n  danger: { prefix: 'far', iconName: 'exclamation-circle' },\r\n  warning: { prefix: 'far', iconName: 'exclamation-circle' },\r\n  primary: { prefix: 'far', iconName: 'info-square' },\r\n};\r\n\r\nconst getIconBasedOnType = (type: string) => {\r\n  const icon = icons[type];\r\n  return icon ? <FaTimes /> : null;\r\n};\r\n\r\nclass Toast extends React.Component<IToastProps, IToastState> {\r\n  static defaultProps = {\r\n    type: EToastType.Primary,\r\n    time: 5000,\r\n    autoDismiss: true,\r\n    alone: true,\r\n    onClose: () => {},\r\n  };\r\n\r\n  readonly state = {\r\n    time: this.props.time,\r\n    visible: true,\r\n  };\r\n\r\n  timer: number = 0;\r\n\r\n  componentDidMount() {\r\n    const { autoDismiss } = this.props;\r\n    if (autoDismiss) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { autoDismiss } = this.props;\r\n    if (autoDismiss) {\r\n      clearInterval(this.timer);\r\n    }\r\n  }\r\n\r\n  handleMouseLeave = () => {\r\n    const { autoDismiss } = this.props;\r\n    if (autoDismiss) {\r\n      this.startTimer();\r\n    }\r\n  };\r\n\r\n  onDismiss = () => {\r\n    const { onClose } = this.props;\r\n    this.setState({ visible: false });\r\n    onClose();\r\n  };\r\n\r\n  handleMouseEnter = () => {\r\n    const { autoDismiss } = this.props;\r\n    if (autoDismiss) {\r\n      this.pauseTimer();\r\n    }\r\n  };\r\n\r\n  startTimer = () => {\r\n    const { time } = this.state;\r\n    const { onClose } = this.props;\r\n    this.timer = window.setInterval(() => {\r\n      this.setState({\r\n        visible: false,\r\n      });\r\n      onClose();\r\n    }, time);\r\n  };\r\n\r\n  pauseTimer = () => {\r\n    window.clearInterval(this.timer);\r\n  };\r\n\r\n  render() {\r\n    const { type, alone, message } = this.props;\r\n    const { visible } = this.state;\r\n    const toastClasses = classNames('toast', `toast-${type}`, {\r\n      'toast-container': alone,\r\n    });\r\n    return (\r\n      visible && (\r\n        <div\r\n          className={toastClasses}\r\n          onMouseEnter={this.handleMouseEnter}\r\n          onMouseLeave={this.handleMouseLeave}\r\n        >\r\n          <div className=\"toast__icon\">\r\n            <span aria-hidden=\"true\">{getIconBasedOnType(type)}</span>\r\n          </div>\r\n          <div className=\"toast__content\">{t(message)}</div>\r\n          <div className=\"toast__action\">\r\n            <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.onDismiss}>\r\n              <span aria-hidden=\"true\">\r\n                <FaTimes />\r\n              </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toast;\r\n","import React from 'react';\nimport { removeToastAction } from '../../redux/global/action';\nimport Toast from './Toast';\nimport { RootState } from 'ReduxTypes';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { IToast } from '../../redux/global/type';\nimport { getToasts } from '../../redux/global/selector';\n\ninterface IGlobalToastContainerProps {\n  toasts: IToast[];\n  removeToast: typeof removeToastAction;\n}\n\nconst GlobalToastContainer = ({ toasts, removeToast }: IGlobalToastContainerProps) => {\n  const onClose = (id: number) => {\n    removeToast(id);\n  };\n  return (\n    <div className=\"global-toast-container\">\n      {toasts.map(toast => (\n        <Toast\n          key={toast.id}\n          message={toast.message}\n          type={toast.type}\n          onClose={() => onClose(toast.id)}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  toasts: getToasts(state),\n});\n\nconst mapDispatchToProps = (dispatch: any) =>\n  bindActionCreators(\n    {\n      removeToast: removeToastAction,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalToastContainer);\n","import React, { ReactElement } from 'react';\nimport { isArray } from 'util';\n\n/*props pass to Field and exclude to ReactElement in clone */\nexport const nonProps: any = ['showAndHide', 'email'];\n\nexport const getChildrens = (obj: ReactElement, cloneFn: Function): any => {\n  if (isArray(obj))\n    return obj\n      .map((item: any) => {\n        return item ? getChildrens(item, cloneFn) : null;\n      })\n      .filter((e: any) => e);\n\n  //let newObj = cloneFn(obj);\n  const {\n    props: { children = null },\n  } = obj;\n  const hasChildrens = children && isArray(children);\n  if (hasChildrens) {\n    const newProps = {\n      children: children\n        .map((item: any) => {\n          return item ? getChildrens(item, cloneFn) : null;\n        })\n        .filter((e: any) => e),\n    };\n    return React.cloneElement(obj, newProps);\n  }\n  return cloneFn(obj);\n};\n\nexport const namespace = (types: object, module: string = 'GENERAL', delimiter: string = '_') => {\n  const dispatchTypes = ['', '_SUCCESS', '_FAILED'];\n  return Object.keys(types).reduce((ret: object, type: any) => {\n    return {\n      ...ret,\n      ...dispatchTypes.reduce((ret: object, v: string) => {\n        return {\n          ...ret,\n          [type + v]: (module + delimiter + type + v).toUpperCase(),\n        };\n      }, {}),\n    };\n  }, {});\n};\n","import React, { ReactElement } from 'react';\nimport { IntegrityConnect } from '../../../integrity/connect';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport './FormikForm.scss';\nimport { getChildrens } from '../../../integrity/helpers';\nimport { fetchAdd, fetchCommit } from '../../../redux/global/action';\nimport { mockPostAction } from '../../../redux/mock/action';\n\ninterface FormikFormProps {\n  children: ReactElement;\n  initialValues?: Object;\n  validationSchema: any;\n  className: any;\n  action: string;\n  method?: string;\n  onSubmit?(value: any, formProps: Object): any;\n  submit: any;\n  msgError: string;\n  fetchAdd: typeof fetchAdd;\n  fetchCommit: typeof fetchCommit;\n  mockPost: typeof mockPostAction;\n  onSuccess: () => {};\n}\n\nconst FormikForm = (props: FormikFormProps) => {\n  const {\n    children,\n    validationSchema,\n    initialValues = Object.keys(validationSchema.fields).reduce((ret, item) => {\n      return {\n        ...ret,\n        [item]: '',\n      };\n    }, {}),\n    onSubmit,\n    className,\n    action,\n    submit,\n    method = 'POST',\n    msgError,\n    fetchAdd,\n    fetchCommit,\n    mockPost,\n    onSuccess,\n  } = props;\n\n  const clone = (obj: any): any => {\n    let newProps = {};\n    const getTests = (path: string) => {\n      try {\n        return Yup.reach(validationSchema, path)\n          .describe()\n          .tests.reduce((ret, item) => {\n            return {\n              ...ret,\n              [item.name]: true,\n            };\n          }, {});\n      } catch (error) {\n        return {};\n      }\n    };\n\n    const {\n      props: { name },\n    } = obj;\n    const { fields } = validationSchema.describe();\n    if (fields[name]) newProps = getTests(name);\n\n    return React.cloneElement(obj, {\n      ...newProps,\n      key: `key_formik_form_${name}`,\n    });\n  };\n\n  const childrens = children && getChildrens(children, clone);\n  const getValues = childrens.reduce(\n    (ret: {}, { props: { name, value } = { name: '', value: '' } }: any) => {\n      return {\n        ...ret,\n        ...(value && { [name]: value }),\n      };\n    },\n    {}\n  );\n\n  return (\n    <Formik\n      initialValues={{ ...initialValues, ...getValues }}\n      validationSchema={validationSchema}\n      onSubmit={async (values, formProps) => {\n        const { action } = props;\n        const data = onSubmit ? onSubmit(values, formProps) : values;\n        if (!data) return;\n\n        (await mockPost({ ...data, action })) && onSuccess();\n      }}\n    >\n      {formikform => {\n        return <Form className={className}>{childrens}</Form>;\n      }}\n    </Formik>\n  );\n};\n\nexport default IntegrityConnect(FormikForm, ['fetchAdd', 'fetchCommit', 'mockPost']);\n","import React, { Fragment } from 'react';\nimport { FormattedNumber } from 'react-intl';\nimport { urlHelpers } from '../../config/AppUrls';\nimport { minimumFractionDigits, TransactionTypeStatus } from '../../config/AppConstants';\nimport { StatusLabel, StatusDot } from '../../components/commons';\nimport { isEmpty, camelCase } from 'lodash';\nimport classNames from 'classnames';\n\n\nexport const amountFormatter = (amount: number, currency?: string) => {\n  if (typeof amount === 'undefined' || amount === null) return '—';\n  return (\n    <Fragment>\n      {currency && <span>{currency} &nbsp;</span>}\n      <FormattedNumber minimumFractionDigits={minimumFractionDigits} value={amount} />\n    </Fragment>\n  );\n};\n\nexport const requiredFormatter = (label: string) => {\n  return (\n    <Fragment>\n      {label} <span className=\"required-asterix\">*</span>\n    </Fragment>\n  );\n};\n\nexport const bracketFormatter = (textValue: string, bracketValue: string | number) => {\n  if (textValue && !isEmpty(textValue)) return `${textValue} (${bracketValue})`;\n  return '';\n};\n\nexport const pmImageFormatter = (code: string, name: string = '', showTooltip: boolean = false) => {\n  const tooltip = name || code;\n  if (code === null || code === undefined || code.trim() === '') {\n    return <span>—</span>;\n  }\n  return (\n    <>\n      <img\n        src={urlHelpers.getPaymentMethodImage(code)}\n        className=\"payment-method-logo\"\n        alt={name}\n        onError={urlHelpers.handleErrorImage}\n        key={code}\n        data-tip\n        data-for={code} \n      />\n      \n    </>\n  );\n};\n\n\nexport const merchantStatusLimitFormatter = (status: string, value: number) => {\n  return (\n    <div className=\"text-status\">\n      {statusDotFormatter(status)} <span className=\"limit-value\">{value}</span>\n    </div>\n  );\n};\n\nexport const statusFormatter = (status: string) => {\n  return <StatusLabel key={status} status={status} />;\n};\n\nexport const statusSelectFormatter = (\n  status: string,\n  onClose?: (status: string) => void,\n  forcePrimary: boolean = false\n) => {\n  return (\n    <StatusLabel\n      key={status}\n      status={status}\n      className=\"options__container__item\"\n      withClose\n      onClose={onClose}\n      forcePrimary={forcePrimary}\n    />\n  );\n};\n\nexport const statusDotFormatter = (status: string) => <StatusDot status={status} />;\n\nexport const emptyFormatter = (value: any) =>\n  (typeof value === 'string' && value.trim() === '') || value === null || value === undefined\n    ? '—'\n    : value;\n\nexport const isXML = (data: string) => {\n  const doc = new DOMParser().parseFromString(data, 'text/xml');\n  return doc.body === null;\n};\n\nexport const arrayFomatter = (data: Array<any>) => {\n  return data.join(', ');\n};\n\nexport const xmlFormatter = (data: string) => {\n  const PADDING = ' '.repeat(2); // set desired indent size here\n  const reg = /(>)(<)(\\/*)/g;\n  let pad = 0;\n  const xml = data.replace(reg, '$1\\r\\n$2$3');\n\n  return xml\n    .split('\\r\\n')\n    .map(node => {\n      let indent = 0;\n      if (node.match(/.+<\\/\\w[^>]*>$/)) {\n        indent = 0;\n      } else if (node.match(/^<\\/\\w/) && pad > 0) {\n        pad -= 1;\n      } else if (node.match(/^<\\w[^>]*[^/]>.*$/)) {\n        indent = 1;\n      } else {\n        indent = 0;\n      }\n      pad += indent;\n\n      return PADDING.repeat(pad - indent) + node;\n    })\n    .join('\\r\\n');\n};\n\nexport const jsonFormatter = (json: string) => {\n  return json && JSON.stringify(JSON.parse(json), null, 2);\n};\n\nexport const isValidJson = (json: string) => {\n  try {\n    JSON.parse(json);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\nexport const urlDecode = (data: string) => {\n  return data && decodeURIComponent(data.replace(/\\+/g, ' '));\n};\n\nexport const depositReasonFormatter = (reason: string) => {\n  const label = `options_${reason}`;\n  return camelCase(label);\n};\n","import React, { ReactElement } from 'react';\nimport classNames from 'classnames';\nimport { isObject } from 'lodash';\nimport { ErrorMessage, connect } from 'formik';\nimport { requiredFormatter } from '../../../helpers/formatters';\nimport { getChildrens, nonProps } from '../../../integrity/helpers';\n\nconst FieldContent = (props: any) => {\n  const {\n    field: { name, value, onChange, onBlur },\n    form: { touched, errors },\n    className,\n    label,\n    required,\n    handleOnBlur,\n    handleOnChange,\n    children,\n    onFieldBlur = 'onBlur',\n    onFieldChange = 'onChange',\n    email,\n  } = props;\n\n  const classes = classNames(className, 'form-control', {\n    'is-invalid': errors[name] && touched[name],\n  });\n\n  const handleInputChange = (event: any) => {\n    onChange && onChange(event);\n    handleOnChange && handleOnChange(event);\n  };\n\n  const handleInputBlur = (event: any) => {\n    onBlur && onBlur(event);\n    handleOnBlur && handleOnBlur(event);\n  };\n\n  const clone = (obj: ReactElement): any => {\n    const {\n      props: { id, type },\n    } = obj;\n    const childProp = Object.keys(props).reduce((ret, key) => {\n      const exist = typeof obj.props[key] !== 'undefined';\n\n      //console.log(ReactDOM.findDOMNode(props));\n      //console.log(typeof obj.props);\n\n      /*if (!isObject(props[key])) {\n        if (!exist) {\n          console.log(key);\n          console.log(props);\n        }\n      }*/\n\n      return isObject(props[key])\n        ? ret\n        : { ...ret, ...(nonProps.indexOf(key) === -1 && { [key]: props[key] }) };\n    }, {});\n\n    return id === name\n      ? React.cloneElement(obj, {\n          ...childProp,\n          name,\n          value,\n          className: classes,\n          [onFieldBlur]: handleInputBlur,\n          [onFieldChange]: handleInputChange,\n          ...(email && { type: 'email' }) || {type},\n          key: name,\n        })\n      : obj;\n  };\n\n  return (\n    <div className=\"form-group\">\n      {label && <label htmlFor={name}>{required ? requiredFormatter(label) : label}</label>}\n      {getChildrens(children, clone)}\n      {touched[name] && errors[name] && (\n        <ErrorMessage name={name} component=\"div\" className=\"invalid-feedback\" />\n      )}\n    </div>\n  );\n};\n\nexport default connect(FieldContent);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\n\nimport { ITextInputProps } from './types';\nimport { FieldContents } from '.';\n\nconst TextInput = (props: ITextInputProps) => {\n  const [showPass, setShowPass] = useState(false);\n\n  const {\n    showAndHide = false,\n    type = 'input',\n    field: { name },\n  } = props;\n\n  const icon = showPass ? <FaEyeSlash />  : <FaEye />;\n\n  const iconClasses = classNames({\n    'input-group-text': true,\n    'icon-with-pointer': showPass,\n    'rounded-right': true,\n  });\n\n  return (\n    <FieldContents {...props}>\n      {type === 'password' && showAndHide ? (\n        <div className=\"input-group default-input-group\">\n          <input id={name} type={showPass ? 'input' : 'password'} />\n          <div className=\"input-group-append\">\n            <span\n              className={iconClasses}\n              onClick={() => setShowPass(!showPass)}\n              onKeyPress={() => setShowPass(!showPass)}\n            >\n              {icon}\n            </span>\n          </div>\n        </div>\n      ) : (\n        <input id={name} type={type} />\n      )}\n    </FieldContents>\n  );\n};\n\nexport default TextInput;\n","import moment, { Moment } from 'moment';\nimport { locale } from '../config/i18n';\nimport { candidatesDaysSpan } from '../config/AppConstants';\n\ninterface ICandidatesRange {\n  from: string;\n  to: string;\n}\n\nconst convertSecondsToTime = (seconds: string) => {\n  const parsed = parseInt(seconds, 10);\n  return moment.duration(parsed, 'seconds');\n};\n\nconst DateFormats = {\n  RegularDate: 'L',\n  RegularDateTime: 'L H:mm:ss',\n  TextDateTime: 'll H:mm:ss',\n  TextDate: 'll',\n  MonthAndYear: 'MM/YYYY',\n};\n\nconst formatDateUTCAs = (dateObject: string, dateFormat: string) => {\n  return moment.utc(dateObject).local().format(dateFormat);\n};\n\nconst formatDateAs = (dateObject: Date, dateFormat: string) => {\n  return moment(dateObject).format(dateFormat);\n};\n\nconst formatDateFromNow = (dateObject: Date) => {\n  return moment.utc(dateObject).fromNow();\n};\n\nconst candidatesDateRange = (creationDate: Date | Moment): ICandidatesRange => {\n  const from = moment(creationDate).subtract(30, 'minutes').format('X');\n  let to = moment(creationDate).add(candidatesDaysSpan, 'days');\n  if (to.isAfter(moment())) {\n    to = moment().endOf('day');\n  }\n  return { from, to: to.format('X') };\n};\n\nmoment.locale(locale);\n\nexport {\n  convertSecondsToTime,\n  formatDateAs,\n  formatDateUTCAs,\n  formatDateFromNow,\n  DateFormats,\n  candidatesDateRange,\n};\n","import React, { Component } from 'react';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport { TextInput } from '..';\nimport moment, { Moment } from 'moment';\nimport { IDateRangeProps, DateRanges } from '../types';\nimport { DateFormats } from '../../../../helpers/DateHelpers';\n\nconst ranges: DateRanges = {\n  Today: [moment().startOf('day'), moment()],\n  Yesterday: [\n    moment().startOf('day').subtract(1, 'days'),\n    moment().endOf('day').subtract(1, 'days'),\n  ],\n  'Last 7 Days': [moment().startOf('day').subtract(6, 'days'), moment().endOf('day')],\n  'This Month': [moment().startOf('month'), moment().endOf('month')],\n  'Last Month': [\n    moment().subtract(1, 'month').startOf('month'),\n    moment().subtract(1, 'month').endOf('month'),\n  ],\n};\n\nclass DateRange extends Component<IDateRangeProps> {\n  static defaultProps = {\n    opensTo: 'left',\n    dropsTo: 'down',\n    maxDate: moment().endOf('day'),\n    withRanges: true,\n    maxSpan: { days: 59 },\n  };\n\n  handleApply = (event: any, picker: any) => {\n    this.handleRangeChanged(picker.startDate, picker.endDate);\n  };\n\n  handleCancel = (event: any, picker: any) => {\n    this.handleRangeChanged(picker.startDate, picker.endDate);\n  };\n\n  handleEvent = (event: any, picker: any) => {\n    let { startDate, endDate } = picker;\n    const { haveClear } = this.props;\n    if (haveClear && event.type === 'cancel') {\n      startDate = undefined;\n      endDate = undefined;\n    }\n    this.handleRangeChanged(startDate, endDate);\n  };\n\n  handleRangeChanged = (from: Moment, to: Moment) => {\n    const {\n      form: { setFieldValue },\n      fromName,\n      toName,\n    } = this.props;\n    const fromLabel = fromName || 'from';\n    const toLabel = toName || 'to';\n    setFieldValue(fromLabel, from ? from.format('X') : undefined);\n    setFieldValue(toLabel, to ? to.format('X') : undefined);\n  };\n\n  render() {\n    const {\n      field,\n      form,\n      startDate,\n      endDate,\n      opensTo,\n      dropsTo,\n      placeholder,\n      maxDate,\n      withRanges,\n      maxSpan,\n      haveClear,\n      timePicker = false,\n    } = this.props;\n    const start = startDate ? startDate.format(DateFormats.RegularDateTime) : '';\n    const end = endDate ? endDate.format(DateFormats.RegularDateTime) : '';\n    let label = start;\n    if (start !== end) {\n      label = `${label} - ${end}`;\n    }\n\n    const locale = {\n      format: DateFormats.RegularDateTime,\n      separator: ' - ',\n      weekLabel: 'W',\n      daysOfWeek: moment.weekdaysMin(),\n      monthNames: moment.monthsShort(),\n      firstDay: moment.localeData().firstDayOfWeek(),\n      cancelLabel: haveClear ? 'Clear' : 'Cancel',\n    };\n    return (\n      <DateRangePicker\n        startDate={startDate}\n        endDate={endDate}\n        maxDate={maxDate}\n        timePicker={timePicker}\n        timePicker24Hour={timePicker}\n        timePickerSeconds={timePicker}\n        containerStyles={{ display: 'block' }}\n        locale={locale}\n        opens={opensTo}\n        drops={dropsTo}\n        maxSpan={maxSpan}\n        ranges={withRanges ? ranges : undefined}\n        alwaysShowCalendars\n        onEvent={this.handleEvent}\n      >\n        <TextInput\n          field={{ ...field, value: label }}\n          placeholder={placeholder}\n          form={form}\n          icon={'calendar'}\n        />\n      </DateRangePicker>\n    );\n  }\n}\n\nexport default DateRange;\n","import React from 'react';\nimport './Login.scss';\nimport { loginAction } from '../../redux/session/action';\nimport { showToastAction } from '../../redux/global/action';\nimport * as Yup from 'yup';\nimport { Field } from 'formik';\nimport FormikForm from '../../components/formik/FormikForm/FormikForm';\nimport { TextInput } from '../../components/formik/fields';\nimport { Button, EButtonType } from '../../components/commons';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Routes } from '../../config/AppUrls';\nimport { t } from '../../config/i18n';\n\ninterface ILoginPageProps extends RouteComponentProps {\n  login: typeof loginAction;\n  showToast: typeof showToastAction;\n  loading: boolean;\n}\n\nconst LoginPage = (props: ILoginPageProps) => {\n  const { history, loading } = props;\n  const redirectHome = () => history.push(Routes.HOME);\n\n  const loginValidation = Yup.object().shape({\n    username: Yup.string().email(t('validationEmail')).required(t('validationRequired')),\n    password: Yup.string().required(t('validationRequired')),\n  });\n\n  return (\n    <div className=\"login-page\">\n      <div className=\"login-page__container\">\n        <div className=\"d-md-flex h-md-100 align-items-center\">\n          <div className=\"logoarea text-white h-100 \">\n            <div className=\"p-5\">\n              <h5>{t('appTitle')}</h5>\n              <br></br>\n              <div className=\"align-left\">{t('appWelcome')}</div>\n            </div>\n          </div>\n          <div className=\"col-md-6 p-3 bg-white h-md-100 loginarea\">\n            <div className=\"p-5 justify-content-center\">\n              <h3>{t('loginTitle')}</h3>\n\n              <FormikForm\n                action=\"login\"\n                validationSchema={loginValidation}\n                className=\"login-page__container__form\"\n                msgError=\"Login Failed...\"\n                onSuccess={() => {\n                  redirectHome();\n                }}\n              >\n                <Field\n                  component={TextInput}\n                  label={t('labelEmail')}\n                  name=\"username\"\n                  value=\"admin@test.com\"\n                  placeholder={t('placeholderEmail')}\n                />\n                <Field\n                  component={TextInput}\n                  label={t('labelPassword')}\n                  name=\"password\"\n                  type=\"password\"\n                  value=\"admin\"\n                  placeholder={t('placeholderPassword')}\n                  showAndHide={true}\n                />\n                <Button\n                  buttonType={EButtonType.primary}\n                  block\n                  type=\"submit\"\n                  className=\"text-uppercase\"\n                  disabled={loading}\n                  loading={loading}\n                >\n                  {t('buttonLogIn')}\n                </Button>\n              </FormikForm>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { ErrorMessage } from 'formik';\r\nimport NumberFormat from 'react-number-format';\r\nimport { compose } from 'redux';\r\nimport { getDecimalSeparator, getThousandSeparator } from '../../../helpers/Utils';\r\nimport { INumberInputProps } from './types';\r\nimport { injectIntl } from 'react-intl';\r\nimport { requiredFormatter } from '../../../helpers/formatters';\r\n\r\nconst NumberInput = (props: INumberInputProps) => {\r\n  const {\r\n    field: { name, value, onBlur },\r\n    form: { touched, errors, setFieldValue },\r\n    required,\r\n    intl,\r\n    label,\r\n    placeholder,\r\n    autoComplete = 'off',\r\n    disabled = false,\r\n    handleOnChange,\r\n    addOn,\r\n  } = props;\r\n\r\n  const decimalSeparator = getDecimalSeparator(intl.locale);\r\n  const groupSeparator = getThousandSeparator(intl.locale);\r\n\r\n  const classes = classNames('form-control', { 'is-invalid': errors[name] && touched[name] });\r\n\r\n  const valueChange = (name: string, v: any) => {\r\n    const value = v.floatValue ? v.floatValue : v.value;\r\n    setFieldValue(name, value);\r\n    handleOnChange && handleOnChange(value);\r\n  };\r\n\r\n  const input = (\r\n    <NumberFormat\r\n      name={name}\r\n      id={name}\r\n      value={value}\r\n      autoComplete={autoComplete}\r\n      onValueChange={v => {\r\n        valueChange(name, v);\r\n      }}\r\n      thousandSeparator={groupSeparator}\r\n      decimalSeparator={decimalSeparator}\r\n      className={classes}\r\n      placeholder={placeholder}\r\n      disabled={disabled}\r\n      onBlur={onBlur}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={name}>{required ? requiredFormatter(label) : label}</label>}\r\n      {addOn ? (\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\" id=\"basic-addon2\">\r\n              {addOn}\r\n            </span>\r\n          </div>\r\n          {input}\r\n        </div>\r\n      ) : (\r\n        input\r\n      )}\r\n      {touched[name] && errors[name] && (\r\n        <ErrorMessage name={name} component=\"div\" className=\"invalid-feedback\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default compose(injectIntl)(NumberInput);\r\n","import { bindActionCreators, Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from 'ReduxTypes';\r\nimport { loginAction } from '../../redux/session/action';\r\nimport LoginPage from './LoginPage';\r\nimport { showToastAction } from '../../redux/global/action';\r\nimport { withRouter } from 'react-router';\r\nimport { isLoading } from '../../redux/global/selector';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  loading: isLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      login: loginAction,\r\n      showToast: showToastAction,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nconst routerLogin = withRouter(LoginPage);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(routerLogin);\r\n","export interface IMenu {\n  text: string;\n  icon: any;\n  route?: string;\n  submenu?: IMenu[];\n  clickEvent?: () => void;\n}\n\nconst menu: IMenu[] = [\n  { text: 'menuHomePage', icon: 'home' },\n  {\n    text: 'menuDashboard',\n    icon: 'dashboard',\n    submenu: [\n      {\n        text: 'menuPanels',\n        icon: 'desktop',\n      },\n      {\n        text: 'menuConfigurations',\n        icon: 'appstore',\n      },\n      {\n        text: 'menuGetItems',\n        icon: 'bank',\n      },\n    ],\n  },\n  {\n    text: 'menuDashboard 2',\n    icon: 'dashboard',\n    submenu: [\n      {\n        text: 'menuPanels',\n        icon: 'desktop',\n      },\n      {\n        text: 'menuConfigurations',\n        icon: 'appstore',\n      },\n      {\n        text: 'menuGetItems',\n        icon: 'bank',\n      },\n    ],\n  },\n];\n\nexport default menu;\n","import React from 'react';\r\nimport mainmenu from '../../config/Menu';\r\nimport './MainMenu.scss';\r\nimport { t } from '../../config/i18n';\r\nimport { Panel } from '../commons';\r\n\r\ninterface IMainMenuProps {\r\n  title?: string;\r\n}\r\nconst MainMenu = ({ title }: IMainMenuProps) => (\r\n  <Panel className=\"left-menu\">\r\n    {title && <Panel className=\"header\" header={title} />}\r\n    <Panel className=\"menu-content\" withScroll>\r\n      {mainmenu.map(({ icon, text, submenu }) => (\r\n        <Panel\r\n          icon={icon}\r\n          key={btoa(text)}\r\n          name={btoa(text)}\r\n          className=\"main-menu item-menu\"\r\n          header={t(text)}\r\n          submenu={submenu}\r\n          iconRight={submenu || null}\r\n          rotateIcon=\"iconRight\"\r\n          childrensWithDottedTree\r\n          menuExpanded\r\n        />\r\n      ))}\r\n    </Panel>\r\n  </Panel>\r\n);\r\n\r\nexport default MainMenu;\r\n","import React from 'react';\r\nimport './Dashboard.scss';\r\nimport { Panel, Button, EButtonType } from '../../components/commons';\r\nimport { t } from '../../config/i18n';\r\nimport * as Yup from 'yup';\r\nimport { withRouter, RouteComponentProps } from 'react-router';\r\nimport { IntegrityConnect, showModalAction, isLoading } from '../../integrity/connect';\r\nimport { EModalComponentType, EModalType, EModalSize } from '../../redux/global/type';\r\nimport FormikForm from '../../components/formik/FormikForm/FormikForm';\r\nimport { Field } from 'formik';\r\nimport { TextInput } from '../../components/formik/fields';\r\nimport { mockPostAction } from '../../redux/mock/action';\r\nimport { FiSettings } from 'react-icons/fi';\r\nimport MainMenu from '../../components/MainMenu/MainMenu';\r\n\r\ninterface IDashboardProps extends RouteComponentProps {\r\n  children?: any;\r\n  user: any;\r\n  showModal: typeof showModalAction;\r\n  isLoading: typeof isLoading;\r\n  mockPost: typeof mockPostAction;\r\n}\r\n\r\nconst Dashboard = (props: IDashboardProps) => {\r\n  const {\r\n    children,\r\n    user: { name, id },\r\n    showModal,\r\n    isLoading,\r\n    mockPost,\r\n    //history,\r\n  } = props;\r\n\r\n  const MainForm = ({ modalType }: any) => {\r\n    const loading = !!isLoading;\r\n\r\n    const loginValidation = Yup.object().shape({\r\n      ...(modalType === 'modify' && { name: Yup.string().required(t('validationRequired')) }),\r\n      ...(modalType === 'change' && { password: Yup.string().required(t('validationRequired')) }),\r\n      ...(modalType === 'change' && {\r\n        confirmPassword: Yup.string()\r\n          .required(t('validationRequired'))\r\n          .oneOf([Yup.ref('password'), ''], t('validationPasswordEqual')),\r\n      }),\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <FormikForm\r\n          action={modalType}\r\n          validationSchema={loginValidation}\r\n          className=\"info-page__container__form\"\r\n          msgError=\"Login Failed...\"\r\n          onSuccess={() => {}}\r\n        >\r\n          <Field component={TextInput} name=\"id\" type=\"hidden\" value={id} />\r\n          {modalType === 'modify' && (\r\n            <Field\r\n              component={TextInput}\r\n              label={t('labelUserName')}\r\n              name=\"name\"\r\n              value={name}\r\n              placeholder={t('placeholderUserName')}\r\n            />\r\n          )}\r\n          {modalType === 'change' && (\r\n            <Field\r\n              component={TextInput}\r\n              label={t('labelPassword')}\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder={t('placeholderPassword')}\r\n              showAndHide={true}\r\n            />\r\n          )}\r\n          {modalType === 'change' && (\r\n            <Field\r\n              component={TextInput}\r\n              label={t('labelConfirmPassword')}\r\n              name=\"confirmPassword\"\r\n              type=\"password\"\r\n              placeholder={t('placeholderConfirmPassword')}\r\n              showAndHide={true}\r\n            />\r\n          )}\r\n          <Button\r\n            buttonType={EButtonType.primary}\r\n            block\r\n            type=\"submit\"\r\n            className=\"text-uppercase\"\r\n            disabled={loading}\r\n            loading={loading}\r\n          >\r\n            {t('buttonSubmit')}\r\n          </Button>\r\n        </FormikForm>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const showCustomModal = (modalType: string) => {\r\n    switch (modalType) {\r\n      case 'logout':\r\n        showModal({\r\n          type: EModalComponentType.Confirmation,\r\n          options: {\r\n            title: t('titleLogout'),\r\n            confirmMessage: t('messageLogout'),\r\n            confirmAction: async () => {\r\n              await mockPost({\r\n                action: 'logout',\r\n                id,\r\n              });\r\n            },\r\n            confirmBtnText: t('buttonLogout'),\r\n            cancelBtnText: t('buttonStop'),\r\n          },\r\n        });\r\n        break;\r\n      case 'reset':\r\n        showModal({\r\n          type: EModalComponentType.Confirmation,\r\n          options: {\r\n            title: t('titleResetPassword'),\r\n            confirmMessage: t('messageResetPassword'),\r\n            confirmAction: async () => {\r\n              await mockPost({\r\n                action: 'reset',\r\n                id,\r\n              });\r\n            },\r\n            confirmBtnText: t('buttonResetPassword'),\r\n            cancelBtnText: t('buttonStop'),\r\n          },\r\n        });\r\n        break;\r\n      case 'change':\r\n      case 'modify':\r\n        showModal({\r\n          type: EModalComponentType.Modal,\r\n          options: {\r\n            title: t('modalT_' + modalType),\r\n            type: EModalType.Info,\r\n            children: <MainForm modalType={modalType} />,\r\n            size: EModalSize.Medium,\r\n          },\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <MainMenu title=\"Full Panel UI\" />\r\n      <Panel\r\n        className=\"content\"\r\n        header={\r\n          <Panel className=\"header\" header={t('titleHome')}>\r\n            <Panel\r\n              header={name}\r\n              iconRight=\"setting\"\r\n              className=\"navbar-menu\"\r\n              rotateIcon=\"iconRight\"\r\n              isDropDown\r\n              submenu={[\r\n                {\r\n                  text: 'menuResetPassword',\r\n                  icon: 'unlock',\r\n                  clickEvent: () => showCustomModal('reset'),\r\n                },\r\n                {\r\n                  text: 'menuChangePassword',\r\n                  icon: 'lock',\r\n                  clickEvent: () => showCustomModal('change'),\r\n                },\r\n                {\r\n                  text: 'menuModifyAccount',\r\n                  icon: 'user-add',\r\n                  clickEvent: () => showCustomModal('modify'),\r\n                },\r\n                {\r\n                  text: 'menuLogout',\r\n                  icon: 'logout',\r\n                  clickEvent: () => showCustomModal('logout'),\r\n                  menuSepar: true,\r\n                },\r\n              ]}\r\n            />\r\n          </Panel>\r\n        }\r\n        footer={<Panel className=\"footer\">Customer Admin Panel (c) 2020 </Panel>}\r\n      >\r\n        <Panel className=\"body\">{children}</Panel>\r\n      </Panel>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst router = withRouter(Dashboard);\r\n\r\nexport default IntegrityConnect(router, ['showModal', 'isLoading', 'mockPost']);\r\n","import React from 'react';\r\nimport { FaTools } from 'react-icons/fa';\r\n\r\ninterface IWelcomeProps {\r\n  name: string;\r\n}\r\n\r\nconst Welcome = (props: IWelcomeProps) => {\r\n  return (\r\n    <article className=\"template\">\r\n      <FaTools size=\"40px\" />\r\n      <h1>\r\n        Welcome, <span>{props.name}</span>\r\n      </h1>\r\n      <p>To the ultimate customer admin panel</p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import React, { useEffect } from 'react';\nimport Dashboard from '../../pages/Dashboard/Dashboard';\nimport './Home.scss';\nimport { Welcome } from '../../pages/Templates';\nimport { showError } from '../../redux/global/action';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { IntegrityConnect } from '../../integrity/connect';\nimport { getUser } from '../../redux/session/selector';\n\ninterface RouteProps {\n  deniedMsg?: string;\n}\ninterface IHomePageProps extends RouteComponentProps<any, any, RouteProps> {\n  showError: typeof showError;\n  getUser: typeof getUser;\n}\n\nconst HomePage = (props: IHomePageProps) => {\n  const { getUser } = props;\n\n  const { name } = getUser;\n\n  useEffect(() => {\n    const {\n      location: { state: { deniedMsg } = { deniedMsg: false } },\n      showError,\n      history,\n    } = props;\n    if (deniedMsg) {\n      showError('errorAccessDenied');\n      history.replace({\n        state: {},\n      });\n    }\n  }, [props]);\n  return (\n    <Dashboard user={getUser}>\n      <div className=\"home\">\n        <Welcome name={name} />\n      </div>\n    </Dashboard>\n  );\n};\n\nconst router = withRouter(HomePage);\nexport default IntegrityConnect(router, ['getUser', 'showError']);\n","import * as React from 'react';\nimport LoginPage from '../pages/Login/LoginPageConnected';\nimport HomePage from '../pages/Home/HomePage';\nimport { Routes } from './AppUrls';\n\nexport interface IBreadcrumbs {\n  label: string;\n  to?: string;\n}\n\ntype RouteType = {\n  path: string;\n  component: React.ComponentType<any>;\n  breadcrumbs?: IBreadcrumbs[];\n  needAuth: boolean;\n};\n\nconst routes: RouteType[] = [\n  {\n    path: Routes.ROOT,\n    component: LoginPage,\n    needAuth: false,\n  },\n  {\n    path: Routes.LOGIN,\n    component: LoginPage,\n    needAuth: false,\n  },\n  {\n    path: Routes.HOME,\n    component: HomePage,\n    needAuth: true,\n  },\n];\n\nexport default routes;\n","import React from 'react';\r\nimport './NotFound.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { Routes } from '../../config/AppUrls';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"not-found\">\r\n      <div className=\"not-found__title\" data-content=\"404\">\r\n        <span>\r\n          <span>4</span>\r\n        </span>\r\n        <span>0</span>\r\n        <span>\r\n          <span>4</span>\r\n        </span>\r\n      </div>\r\n      <div className=\"not-found__subtitle\">Something's wrong here...</div>\r\n      <p>\r\n        We can't find the page you're looking for. Please go back home and start\r\n        over.\r\n      </p>\r\n      <div className=\"not-found__buttons\">\r\n        <Link to={Routes.HOME} className=\"not-found__buttons--button\">\r\n          Go to home page\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\n//import IconLibrary from './config/IconLibrary';\r\nimport { withTranslation, WithTranslation } from 'react-i18next'; \r\nimport { Loading } from './components/commons';\r\nimport { ModalContainer } from './components';\r\nimport { start } from './redux/mock/action';\r\nimport { fetchAdd, fetchCommit, setGlobalStateAction } from './redux/global/action';\r\nimport routes from './config/Routes';\r\nimport { Routes } from './config/AppUrls';\r\nimport NotFound from './pages/NotFound/NotFound';\r\nimport { IntegrityConnect } from './integrity/connect';\r\nimport GlobalToastContainer from './components/ToastContainer/GlobalToastContainer';\r\n\r\n//IconLibrary.init();\r\n\r\ninterface appProps extends WithTranslation {   \r\n  isLaunched: boolean;\r\n  isLoading: boolean; \r\n  isAuthenticated: boolean;  \r\n  fetchAdd: typeof fetchAdd;\r\n  fetchCommit: typeof fetchCommit;\r\n  setGlobalState: typeof setGlobalStateAction;\r\n}\r\n\r\nconst App = (props: appProps) => {\r\n  const { isAuthenticated, isLoading, isLaunched, fetchAdd, fetchCommit } = props; \r\n\r\n  useEffect(() => {\r\n    if (!isLaunched && !isLoading) {\r\n      //start(true);\r\n      start();\r\n      //fetchAdd('startApp');\r\n      //fetchCommit('START');\r\n    }\r\n  });\r\n\r\n  return ( \r\n    <BrowserRouter>\r\n      <Switch>\r\n        {routes.map(({ breadcrumbs = [], needAuth, ...route }) => (\r\n          <Route\r\n            exact\r\n            key={route.path}\r\n            path={route.path}\r\n            render={props => {\r\n              if (!needAuth || (needAuth && isAuthenticated)) {\r\n                return <route.component />;\r\n              } else {\r\n                return <Redirect to={Routes.LOGIN} />;\r\n              }\r\n            }}\r\n          />\r\n        ))}\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <ModalContainer />\r\n      <GlobalToastContainer />\r\n      <Loading />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nconst appTranslated = withTranslation()(App);\r\n\r\nexport default IntegrityConnect(appTranslated, [\r\n  'fetchAdd',\r\n  'fetchCommit',\r\n  'setGlobalState',\r\n  'isLaunched',\r\n  'isLoading',\r\n  'isAuthenticated',\r\n]);\r\n","/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(\n      registration => {\n        registration.unregister();\n      },\n      err => console.error('Service worker registration failed with:', err)\n    );\n  }\n}\n","export enum SessionActions {\r\n  LOGIN = 'session/LOGIN',\r\n  LOGIN_SUCCESS = 'session/LOGIN_SUCCESS',\r\n  LOGIN_FAILURE = 'session/LOGIN_FAILURE',\r\n  LOGOUT = 'session/LOGOUT',\r\n  LOADING = 'session/LOADING',\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  password: string;\r\n  name: string;\r\n  language: string;\r\n  role: string;\r\n}\r\n","import { EModalComponentType, IModal, IToast, IGenericFetch } from './type';\nimport { ActionType } from 'typesafe-actions';\nimport { GlobalActions } from './action';\nimport { handleActions } from 'redux-actions';\n\nconst initModal: IModal = {\n  show: false,\n  type: EModalComponentType.Modal,\n  options: {\n    title: '',\n    backDrop: false,\n    children: null,\n    onClose: () => {},\n  },\n};\n\nexport interface GlobalState {\n  isLoading: boolean;\n  isLaunched: boolean;\n  modal: IModal;\n  toasts: IToast[];\n  fetchs: IGenericFetch[];\n}\n\nexport const initialState: GlobalState = {\n  isLoading: false,\n  isLaunched: false,\n  modal: initModal,\n  toasts: [],\n  fetchs: [],\n};\n\nexport default handleActions<GlobalState, ActionType<any>>(\n  {\n    [GlobalActions.REQUEST_START]: state => {\n      return { ...state, isLoading: true };\n    },\n    [GlobalActions.REQUEST_SUCCESS]: state => {\n      return { ...state, isLaunched: true, isLoading: false };\n    },\n    [GlobalActions.REQUEST_FAILED]: state => {\n      return { ...state, isLaunched: true, isLoading: false };\n    },\n    [GlobalActions.SHOW_MODAL]: (state, action) => {\n      return { ...state, modal: { ...action.payload.modal, show: true } };\n    },\n    [GlobalActions.HIDE_MODAL]: state => {\n      return { ...state, modal: { ...initModal } };\n    },\n    [GlobalActions.SHOW_TOAST]: (state, action) => {\n      return { ...state, toasts: [{ ...action.payload, id: state.toasts.length }] };\n    },\n    [GlobalActions.REMOVE_TOAST]: (state, action) => {\n      return { ...state, toasts: state.toasts.filter(toast => toast.id !== action.payload.id) };\n    },\n    [GlobalActions.FETCH_ADD]: (state, { payload }) => {\n      return { ...state, fetchs: [...state.fetchs, payload] };\n    },\n    [GlobalActions.GLOBAL_STATE]: (state, { payload }) => {\n      //console.log(payload);\n      return { ...state, ...payload };\n    },\n  },\n  initialState\n);\n","import { handleActions } from 'redux-actions';\nimport { User, SessionActions } from './type';\nimport { ActionType } from 'typesafe-actions';\n\nconst initialUser = {\n  id: '',\n  username: '',\n  name: '',\n  password: '',\n  language: '',\n  role: '',\n};\nexport const initialState = {\n  loading: false,\n  authenticated: false,\n  user: initialUser,\n};\nexport type SessionState = typeof initialState;\n\nconst sessionReducer = handleActions<SessionState, ActionType<any>>(\n  {\n    [SessionActions.LOGIN_SUCCESS]: (state, { payload: { user } }) => {\n      return {\n        ...state,\n        authenticated: true,\n        user,\n        loading: false,\n      };\n    },\n    [SessionActions.LOGIN_FAILURE]: state => {\n      return { ...state, authenticated: false, user: initialUser, permissions: [], loading: false };\n    },\n    [SessionActions.LOGOUT]: state => {\n      return { ...state, authenticated: false, user: initialUser, permissions: [], loading: false };\n    },\n  },\n  initialState\n);\n\nexport default sessionReducer;\n","import { handleActions } from 'redux-actions';\nimport { MenuActions } from './type';\nimport { ActionType } from 'typesafe-actions';\n\nexport const initialState = {\n  selected: '',\n  blink: '',\n};\n\nexport type MenuState = typeof initialState;\n\nconst MenuReducer = handleActions<MenuState, ActionType<any>>(\n  {\n    [MenuActions.MENU_SELECTED]: (state, {selected }:any ) => {\n      return { ...state, selected  };\n    },\n    [MenuActions.MENU_BLINK]: (state, {blink }:any ) => {\n      return { ...state, blink  };\n    },\n  },\n  initialState\n);\n\nexport default MenuReducer;\n","import { handleActions } from 'redux-actions';\nimport { User, SessionActions } from './type';\nimport { ActionType } from 'typesafe-actions';\n\nconst initialUser = {\n  id: '',\n  username: '',\n  name: '',\n  password: '',\n  language: '',\n  role: '',\n};\nexport const initialState = {\n  loading: false,\n  authenticated: false,\n  user: initialUser,\n};\nexport type SessionState = typeof initialState;\n\nconst sessionReducer = handleActions<SessionState, ActionType<any>>(\n  {\n    [SessionActions.LOGIN_SUCCESS]: (state, { payload: { user } }) => {\n      console.log(user);\n      return {\n        ...state,\n        authenticated: true,\n        user,\n        loading: false,\n      };\n    },\n    [SessionActions.LOGIN_FAILURE]: state => {\n      return { ...state, authenticated: false, user: initialUser, permissions: [], loading: false };\n    },\n    [SessionActions.LOGOUT]: state => {\n      return { ...state, authenticated: false, user: initialUser, permissions: [], loading: false };\n    },\n  },\n  initialState\n);\n\nexport default sessionReducer;\n","import { combineReducers } from 'redux';\nimport globalReducer from './global/reducer';\nimport SessionReducer from './session/reducer';\nimport MenuReducer from './menu/reducer';\nimport MockReducer from './mock/reducer';\nimport { RootState } from 'ReduxTypes';\nimport { ActionType } from 'typesafe-actions';\n\nconst appReducer = combineReducers({\n  global: globalReducer,\n  session: SessionReducer,\n  menu: MenuReducer,\n  mock: MockReducer,\n});\n\nconst rootReducer = (state: RootState, action: ActionType<any>) => {\n  return appReducer(state, action);\n};\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './root-reducer';\n\n// state on app start\nconst initialState = {};\n\n// configure middleware\nconst middleware = [thunk];\n\n//compose enhancers\nconst composeEnhancers = compose;\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\n\n// create store\nconst store = createStore(rootReducer, initialState, enhancer);\n\n// export store singleton instance\nexport default store;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport { locale } from './config/i18n';\nimport i18n from './config/i18n';\nimport { Loading } from './components/commons';\nimport { I18nextProvider } from 'react-i18next';\n\n\nconst root = document.getElementById('root');\n\nif (root) {\n  ReactDOM.render(\n    <I18nextProvider i18n={i18n}>\n      <IntlProvider locale={locale}>\n        <Provider store={store}>\n          <Suspense fallback={<Loading />}>\n            <App />\n          </Suspense>\n        </Provider>\n      </IntlProvider>\n    </I18nextProvider>,\n    root\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}